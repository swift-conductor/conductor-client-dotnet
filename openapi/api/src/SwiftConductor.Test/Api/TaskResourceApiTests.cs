/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SwiftConductor.Client;
using SwiftConductor.Api;
// uncomment below to import models
//using SwiftConductor.Model;

namespace SwiftConductor.Test.Api
{
    /// <summary>
    ///  Class for testing TaskResourceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TaskResourceApiTests : IDisposable
    {
        private TaskResourceApi instance;

        public TaskResourceApiTests()
        {
            instance = new TaskResourceApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TaskResourceApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TaskResourceApi
            //Assert.IsType<TaskResourceApi>(instance);
        }

        /// <summary>
        /// Test All
        /// </summary>
        [Fact]
        public void AllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.All();
            //Assert.IsType<Dictionary<string, long>>(response);
        }

        /// <summary>
        /// Test AllVerbose
        /// </summary>
        [Fact]
        public void AllVerboseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AllVerbose();
            //Assert.IsType<Dictionary<string, Dictionary<string, Dictionary<string, long>>>>(response);
        }

        /// <summary>
        /// Test BatchPoll
        /// </summary>
        [Fact]
        public void BatchPollTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tasktype = null;
            //string? workerid = null;
            //string? domain = null;
            //int? count = null;
            //int? timeout = null;
            //var response = instance.BatchPoll(tasktype, workerid, domain, count, timeout);
            //Assert.IsType<List<Task>>(response);
        }

        /// <summary>
        /// Test GetAllPollData
        /// </summary>
        [Fact]
        public void GetAllPollDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAllPollData();
            //Assert.IsType<List<PollData>>(response);
        }

        /// <summary>
        /// Test GetExternalStorageLocation2
        /// </summary>
        [Fact]
        public void GetExternalStorageLocation2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string operation = null;
            //string payloadType = null;
            //var response = instance.GetExternalStorageLocation2(path, operation, payloadType);
            //Assert.IsType<ExternalStorageLocation>(response);
        }

        /// <summary>
        /// Test GetPollData
        /// </summary>
        [Fact]
        public void GetPollDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskType = null;
            //var response = instance.GetPollData(taskType);
            //Assert.IsType<List<PollData>>(response);
        }

        /// <summary>
        /// Test GetTask
        /// </summary>
        [Fact]
        public void GetTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //var response = instance.GetTask(taskId);
            //Assert.IsType<Task>(response);
        }

        /// <summary>
        /// Test GetTaskLogs
        /// </summary>
        [Fact]
        public void GetTaskLogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //var response = instance.GetTaskLogs(taskId);
            //Assert.IsType<List<TaskExecLog>>(response);
        }

        /// <summary>
        /// Test Log
        /// </summary>
        [Fact]
        public void LogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //string body = null;
            //instance.Log(taskId, body);
        }

        /// <summary>
        /// Test Poll
        /// </summary>
        [Fact]
        public void PollTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tasktype = null;
            //string? workerid = null;
            //string? domain = null;
            //var response = instance.Poll(tasktype, workerid, domain);
            //Assert.IsType<Task>(response);
        }

        /// <summary>
        /// Test RequeuePendingTask
        /// </summary>
        [Fact]
        public void RequeuePendingTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskType = null;
            //var response = instance.RequeuePendingTask(taskType);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test Search1
        /// </summary>
        [Fact]
        public void Search1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? size = null;
            //string? sort = null;
            //string? freeText = null;
            //string? query = null;
            //var response = instance.Search1(start, size, sort, freeText, query);
            //Assert.IsType<SearchResultTaskSummary>(response);
        }

        /// <summary>
        /// Test SearchV21
        /// </summary>
        [Fact]
        public void SearchV21Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? size = null;
            //string? sort = null;
            //string? freeText = null;
            //string? query = null;
            //var response = instance.SearchV21(start, size, sort, freeText, query);
            //Assert.IsType<SearchResultTask>(response);
        }

        /// <summary>
        /// Test Size
        /// </summary>
        [Fact]
        public void SizeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string>? taskType = null;
            //var response = instance.Size(taskType);
            //Assert.IsType<Dictionary<string, int>>(response);
        }

        /// <summary>
        /// Test TaskDepth
        /// </summary>
        [Fact]
        public void TaskDepthTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskType = null;
            //string? domain = null;
            //string? isolationGroupId = null;
            //string? executionNamespace = null;
            //var response = instance.TaskDepth(taskType, domain, isolationGroupId, executionNamespace);
            //Assert.IsType<int>(response);
        }

        /// <summary>
        /// Test UpdateTask
        /// </summary>
        [Fact]
        public void UpdateTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TaskResult taskResult = null;
            //var response = instance.UpdateTask(taskResult);
            //Assert.IsType<string>(response);
        }
    }
}
