/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SwiftConductor.Client;
using SwiftConductor.Api;
// uncomment below to import models
//using SwiftConductor.Model;

namespace SwiftConductor.Test.Api
{
    /// <summary>
    ///  Class for testing WorkflowResourceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WorkflowResourceApiTests : IDisposable
    {
        private WorkflowResourceApi instance;

        public WorkflowResourceApiTests()
        {
            instance = new WorkflowResourceApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WorkflowResourceApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' WorkflowResourceApi
            //Assert.IsType<WorkflowResourceApi>(instance);
        }

        /// <summary>
        /// Test Decide
        /// </summary>
        [Fact]
        public void DecideTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //instance.Decide(workflowId);
        }

        /// <summary>
        /// Test Delete
        /// </summary>
        [Fact]
        public void DeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //bool? archiveWorkflow = null;
            //instance.Delete(workflowId, archiveWorkflow);
        }

        /// <summary>
        /// Test GetExecutionStatus
        /// </summary>
        [Fact]
        public void GetExecutionStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //bool? includeTasks = null;
            //var response = instance.GetExecutionStatus(workflowId, includeTasks);
            //Assert.IsType<Workflow>(response);
        }

        /// <summary>
        /// Test GetExternalStorageLocation
        /// </summary>
        [Fact]
        public void GetExternalStorageLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string operation = null;
            //string payloadType = null;
            //var response = instance.GetExternalStorageLocation(path, operation, payloadType);
            //Assert.IsType<ExternalStorageLocation>(response);
        }

        /// <summary>
        /// Test GetExternalStorageLocation1
        /// </summary>
        [Fact]
        public void GetExternalStorageLocation1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string operation = null;
            //string payloadType = null;
            //var response = instance.GetExternalStorageLocation1(path, operation, payloadType);
            //Assert.IsType<ExternalStorageLocation>(response);
        }

        /// <summary>
        /// Test GetRunningWorkflow
        /// </summary>
        [Fact]
        public void GetRunningWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //int? varVersion = null;
            //long? startTime = null;
            //long? endTime = null;
            //var response = instance.GetRunningWorkflow(name, varVersion, startTime, endTime);
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test GetWorkflows
        /// </summary>
        [Fact]
        public void GetWorkflowsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //List<string> requestBody = null;
            //bool? includeClosed = null;
            //bool? includeTasks = null;
            //var response = instance.GetWorkflows(name, requestBody, includeClosed, includeTasks);
            //Assert.IsType<Dictionary<string, List<Workflow>>>(response);
        }

        /// <summary>
        /// Test GetWorkflows1
        /// </summary>
        [Fact]
        public void GetWorkflows1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string correlationId = null;
            //bool? includeClosed = null;
            //bool? includeTasks = null;
            //var response = instance.GetWorkflows1(name, correlationId, includeClosed, includeTasks);
            //Assert.IsType<List<Workflow>>(response);
        }

        /// <summary>
        /// Test PauseWorkflow
        /// </summary>
        [Fact]
        public void PauseWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //instance.PauseWorkflow(workflowId);
        }

        /// <summary>
        /// Test Rerun
        /// </summary>
        [Fact]
        public void RerunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //RerunWorkflowRequest rerunWorkflowRequest = null;
            //var response = instance.Rerun(workflowId, rerunWorkflowRequest);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test ResetWorkflow
        /// </summary>
        [Fact]
        public void ResetWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //instance.ResetWorkflow(workflowId);
        }

        /// <summary>
        /// Test Restart
        /// </summary>
        [Fact]
        public void RestartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //bool? useLatestDefinitions = null;
            //instance.Restart(workflowId, useLatestDefinitions);
        }

        /// <summary>
        /// Test ResumeWorkflow
        /// </summary>
        [Fact]
        public void ResumeWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //instance.ResumeWorkflow(workflowId);
        }

        /// <summary>
        /// Test Retry
        /// </summary>
        [Fact]
        public void RetryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //bool? resumeSubworkflowTasks = null;
            //instance.Retry(workflowId, resumeSubworkflowTasks);
        }

        /// <summary>
        /// Test Search
        /// </summary>
        [Fact]
        public void SearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? size = null;
            //string? sort = null;
            //string? freeText = null;
            //string? query = null;
            //var response = instance.Search(start, size, sort, freeText, query);
            //Assert.IsType<SearchResultWorkflowSummary>(response);
        }

        /// <summary>
        /// Test SearchV2
        /// </summary>
        [Fact]
        public void SearchV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? size = null;
            //string? sort = null;
            //string? freeText = null;
            //string? query = null;
            //var response = instance.SearchV2(start, size, sort, freeText, query);
            //Assert.IsType<SearchResultWorkflow>(response);
        }

        /// <summary>
        /// Test SearchWorkflowsByTasks
        /// </summary>
        [Fact]
        public void SearchWorkflowsByTasksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? size = null;
            //string? sort = null;
            //string? freeText = null;
            //string? query = null;
            //var response = instance.SearchWorkflowsByTasks(start, size, sort, freeText, query);
            //Assert.IsType<SearchResultWorkflowSummary>(response);
        }

        /// <summary>
        /// Test SearchWorkflowsByTasksV2
        /// </summary>
        [Fact]
        public void SearchWorkflowsByTasksV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? size = null;
            //string? sort = null;
            //string? freeText = null;
            //string? query = null;
            //var response = instance.SearchWorkflowsByTasksV2(start, size, sort, freeText, query);
            //Assert.IsType<SearchResultWorkflow>(response);
        }

        /// <summary>
        /// Test SkipTaskFromWorkflow
        /// </summary>
        [Fact]
        public void SkipTaskFromWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //string taskReferenceName = null;
            //SkipTaskRequest skipTaskRequest = null;
            //instance.SkipTaskFromWorkflow(workflowId, taskReferenceName, skipTaskRequest);
        }

        /// <summary>
        /// Test StartWorkflow
        /// </summary>
        [Fact]
        public void StartWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //StartWorkflowRequest startWorkflowRequest = null;
            //var response = instance.StartWorkflow(startWorkflowRequest);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test StartWorkflow1
        /// </summary>
        [Fact]
        public void StartWorkflow1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Dictionary<string, Object> requestBody = null;
            //int? varVersion = null;
            //string? correlationId = null;
            //int? priority = null;
            //var response = instance.StartWorkflow1(name, requestBody, varVersion, correlationId, priority);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test Terminate1
        /// </summary>
        [Fact]
        public void Terminate1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workflowId = null;
            //string? reason = null;
            //instance.Terminate1(workflowId, reason);
        }

        /// <summary>
        /// Test TestWorkflow
        /// </summary>
        [Fact]
        public void TestWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WorkflowTestRequest workflowTestRequest = null;
            //var response = instance.TestWorkflow(workflowTestRequest);
            //Assert.IsType<Workflow>(response);
        }
    }
}
