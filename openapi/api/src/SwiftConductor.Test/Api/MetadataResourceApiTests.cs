/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SwiftConductor.Client;
using SwiftConductor.Api;
// uncomment below to import models
//using SwiftConductor.Model;

namespace SwiftConductor.Test.Api
{
    /// <summary>
    ///  Class for testing MetadataResourceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MetadataResourceApiTests : IDisposable
    {
        private MetadataResourceApi instance;

        public MetadataResourceApiTests()
        {
            instance = new MetadataResourceApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MetadataResourceApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' MetadataResourceApi
            //Assert.IsType<MetadataResourceApi>(instance);
        }

        /// <summary>
        /// Test Create
        /// </summary>
        [Fact]
        public void CreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WorkflowDef workflowDef = null;
            //instance.Create(workflowDef);
        }

        /// <summary>
        /// Test Get
        /// </summary>
        [Fact]
        public void GetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //int? varVersion = null;
            //var response = instance.Get(name, varVersion);
            //Assert.IsType<WorkflowDef>(response);
        }

        /// <summary>
        /// Test GetAll
        /// </summary>
        [Fact]
        public void GetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAll();
            //Assert.IsType<List<WorkflowDef>>(response);
        }

        /// <summary>
        /// Test GetAllWorkflowsWithLatestVersions
        /// </summary>
        [Fact]
        public void GetAllWorkflowsWithLatestVersionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAllWorkflowsWithLatestVersions();
            //Assert.IsType<List<WorkflowDef>>(response);
        }

        /// <summary>
        /// Test GetTaskDef
        /// </summary>
        [Fact]
        public void GetTaskDefTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tasktype = null;
            //var response = instance.GetTaskDef(tasktype);
            //Assert.IsType<TaskDef>(response);
        }

        /// <summary>
        /// Test GetTaskDefs
        /// </summary>
        [Fact]
        public void GetTaskDefsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTaskDefs();
            //Assert.IsType<List<TaskDef>>(response);
        }

        /// <summary>
        /// Test GetWorkflowNamesAndVersions
        /// </summary>
        [Fact]
        public void GetWorkflowNamesAndVersionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetWorkflowNamesAndVersions();
            //Assert.IsType<Dictionary<string, Object>>(response);
        }

        /// <summary>
        /// Test RegisterTaskDef
        /// </summary>
        [Fact]
        public void RegisterTaskDefTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TaskDef taskDef = null;
            //instance.RegisterTaskDef(taskDef);
        }

        /// <summary>
        /// Test RegisterTaskDef1
        /// </summary>
        [Fact]
        public void RegisterTaskDef1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<TaskDef> taskDef = null;
            //instance.RegisterTaskDef1(taskDef);
        }

        /// <summary>
        /// Test UnregisterTaskDef
        /// </summary>
        [Fact]
        public void UnregisterTaskDefTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tasktype = null;
            //instance.UnregisterTaskDef(tasktype);
        }

        /// <summary>
        /// Test UnregisterWorkflowDef
        /// </summary>
        [Fact]
        public void UnregisterWorkflowDefTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //int varVersion = null;
            //instance.UnregisterWorkflowDef(name, varVersion);
        }

        /// <summary>
        /// Test Update
        /// </summary>
        [Fact]
        public void UpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<WorkflowDef> workflowDef = null;
            //var response = instance.Update(workflowDef);
            //Assert.IsType<BulkResponse>(response);
        }

        /// <summary>
        /// Test Validate
        /// </summary>
        [Fact]
        public void ValidateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WorkflowDef workflowDef = null;
            //instance.Validate(workflowDef);
        }
    }
}
