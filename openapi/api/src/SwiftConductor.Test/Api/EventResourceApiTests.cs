/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SwiftConductor.Client;
using SwiftConductor.Api;
// uncomment below to import models
//using SwiftConductor.Model;

namespace SwiftConductor.Test.Api
{
    /// <summary>
    ///  Class for testing EventResourceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class EventResourceApiTests : IDisposable
    {
        private EventResourceApi instance;

        public EventResourceApiTests()
        {
            instance = new EventResourceApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of EventResourceApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' EventResourceApi
            //Assert.IsType<EventResourceApi>(instance);
        }

        /// <summary>
        /// Test AddEventHandler
        /// </summary>
        [Fact]
        public void AddEventHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EventHandler eventHandler = null;
            //instance.AddEventHandler(eventHandler);
        }

        /// <summary>
        /// Test GetEventHandlers
        /// </summary>
        [Fact]
        public void GetEventHandlersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetEventHandlers();
            //Assert.IsType<List<EventHandler>>(response);
        }

        /// <summary>
        /// Test GetEventHandlersForEvent
        /// </summary>
        [Fact]
        public void GetEventHandlersForEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varEvent = null;
            //bool? activeOnly = null;
            //var response = instance.GetEventHandlersForEvent(varEvent, activeOnly);
            //Assert.IsType<List<EventHandler>>(response);
        }

        /// <summary>
        /// Test RemoveEventHandlerStatus
        /// </summary>
        [Fact]
        public void RemoveEventHandlerStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.RemoveEventHandlerStatus(name);
        }

        /// <summary>
        /// Test UpdateEventHandler
        /// </summary>
        [Fact]
        public void UpdateEventHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EventHandler eventHandler = null;
            //instance.UpdateEventHandler(eventHandler);
        }
    }
}
