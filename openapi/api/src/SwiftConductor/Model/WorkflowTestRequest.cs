/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SwiftConductor.Client.OpenAPIDateConverter;

namespace SwiftConductor.Model
{
    /// <summary>
    /// WorkflowTestRequest
    /// </summary>
    [DataContract(Name = "WorkflowTestRequest")]
    public partial class WorkflowTestRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowTestRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkflowTestRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowTestRequest" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="correlationId">correlationId.</param>
        /// <param name="input">input.</param>
        /// <param name="taskToDomain">taskToDomain.</param>
        /// <param name="workflowDef">workflowDef.</param>
        /// <param name="externalInputPayloadStoragePath">externalInputPayloadStoragePath.</param>
        /// <param name="priority">priority.</param>
        /// <param name="taskRefToMockOutput">taskRefToMockOutput.</param>
        /// <param name="subWorkflowTestRequest">subWorkflowTestRequest.</param>
        public WorkflowTestRequest(string name = default(string), int varVersion = default(int), string correlationId = default(string), Dictionary<string, Object> input = default(Dictionary<string, Object>), Dictionary<string, string> taskToDomain = default(Dictionary<string, string>), WorkflowDef workflowDef = default(WorkflowDef), string externalInputPayloadStoragePath = default(string), int priority = default(int), Dictionary<string, List<TaskMock>> taskRefToMockOutput = default(Dictionary<string, List<TaskMock>>), Dictionary<string, WorkflowTestRequest> subWorkflowTestRequest = default(Dictionary<string, WorkflowTestRequest>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for WorkflowTestRequest and cannot be null");
            }
            this.Name = name;
            this.VarVersion = varVersion;
            this.CorrelationId = correlationId;
            this.Input = input;
            this.TaskToDomain = taskToDomain;
            this.WorkflowDef = workflowDef;
            this.ExternalInputPayloadStoragePath = externalInputPayloadStoragePath;
            this.Priority = priority;
            this.TaskRefToMockOutput = taskRefToMockOutput;
            this.SubWorkflowTestRequest = subWorkflowTestRequest;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets CorrelationId
        /// </summary>
        [DataMember(Name = "correlationId", EmitDefaultValue = false)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// Gets or Sets Input
        /// </summary>
        [DataMember(Name = "input", EmitDefaultValue = false)]
        public Dictionary<string, Object> Input { get; set; }

        /// <summary>
        /// Gets or Sets TaskToDomain
        /// </summary>
        [DataMember(Name = "taskToDomain", EmitDefaultValue = false)]
        public Dictionary<string, string> TaskToDomain { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowDef
        /// </summary>
        [DataMember(Name = "workflowDef", EmitDefaultValue = false)]
        public WorkflowDef WorkflowDef { get; set; }

        /// <summary>
        /// Gets or Sets ExternalInputPayloadStoragePath
        /// </summary>
        [DataMember(Name = "externalInputPayloadStoragePath", EmitDefaultValue = false)]
        public string ExternalInputPayloadStoragePath { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public int Priority { get; set; }

        /// <summary>
        /// Gets or Sets TaskRefToMockOutput
        /// </summary>
        [DataMember(Name = "taskRefToMockOutput", EmitDefaultValue = false)]
        public Dictionary<string, List<TaskMock>> TaskRefToMockOutput { get; set; }

        /// <summary>
        /// Gets or Sets SubWorkflowTestRequest
        /// </summary>
        [DataMember(Name = "subWorkflowTestRequest", EmitDefaultValue = false)]
        public Dictionary<string, WorkflowTestRequest> SubWorkflowTestRequest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowTestRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  TaskToDomain: ").Append(TaskToDomain).Append("\n");
            sb.Append("  WorkflowDef: ").Append(WorkflowDef).Append("\n");
            sb.Append("  ExternalInputPayloadStoragePath: ").Append(ExternalInputPayloadStoragePath).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  TaskRefToMockOutput: ").Append(TaskRefToMockOutput).Append("\n");
            sb.Append("  SubWorkflowTestRequest: ").Append(SubWorkflowTestRequest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Priority (int) maximum
            if (this.Priority > (int)99)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Priority, must be a value less than or equal to 99.", new [] { "Priority" });
            }

            // Priority (int) minimum
            if (this.Priority < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Priority, must be a value greater than or equal to 0.", new [] { "Priority" });
            }

            yield break;
        }
    }

}
