/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SwiftConductor.Client.OpenAPIDateConverter;

namespace SwiftConductor.Model
{
    /// <summary>
    /// Task
    /// </summary>
    [DataContract(Name = "Task")]
    public partial class Task : IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum INPROGRESS for value: IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")]
            INPROGRESS = 1,

            /// <summary>
            /// Enum CANCELED for value: CANCELED
            /// </summary>
            [EnumMember(Value = "CANCELED")]
            CANCELED = 2,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 3,

            /// <summary>
            /// Enum FAILEDWITHTERMINALERROR for value: FAILED_WITH_TERMINAL_ERROR
            /// </summary>
            [EnumMember(Value = "FAILED_WITH_TERMINAL_ERROR")]
            FAILEDWITHTERMINALERROR = 4,

            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 5,

            /// <summary>
            /// Enum COMPLETEDWITHERRORS for value: COMPLETED_WITH_ERRORS
            /// </summary>
            [EnumMember(Value = "COMPLETED_WITH_ERRORS")]
            COMPLETEDWITHERRORS = 6,

            /// <summary>
            /// Enum SCHEDULED for value: SCHEDULED
            /// </summary>
            [EnumMember(Value = "SCHEDULED")]
            SCHEDULED = 7,

            /// <summary>
            /// Enum TIMEDOUT for value: TIMED_OUT
            /// </summary>
            [EnumMember(Value = "TIMED_OUT")]
            TIMEDOUT = 8,

            /// <summary>
            /// Enum SKIPPED for value: SKIPPED
            /// </summary>
            [EnumMember(Value = "SKIPPED")]
            SKIPPED = 9
        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Task" /> class.
        /// </summary>
        /// <param name="taskType">taskType.</param>
        /// <param name="status">status.</param>
        /// <param name="inputData">inputData.</param>
        /// <param name="referenceTaskName">referenceTaskName.</param>
        /// <param name="retryCount">retryCount.</param>
        /// <param name="seq">seq.</param>
        /// <param name="correlationId">correlationId.</param>
        /// <param name="pollCount">pollCount.</param>
        /// <param name="taskDefName">taskDefName.</param>
        /// <param name="scheduledTime">scheduledTime.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="endTime">endTime.</param>
        /// <param name="updateTime">updateTime.</param>
        /// <param name="startDelayInSeconds">startDelayInSeconds.</param>
        /// <param name="retriedTaskId">retriedTaskId.</param>
        /// <param name="retried">retried.</param>
        /// <param name="executed">executed.</param>
        /// <param name="callbackFromWorker">callbackFromWorker.</param>
        /// <param name="responseTimeoutSeconds">responseTimeoutSeconds.</param>
        /// <param name="workflowInstanceId">workflowInstanceId.</param>
        /// <param name="workflowType">workflowType.</param>
        /// <param name="taskId">taskId.</param>
        /// <param name="reasonForIncompletion">reasonForIncompletion.</param>
        /// <param name="callbackAfterSeconds">callbackAfterSeconds.</param>
        /// <param name="workerId">workerId.</param>
        /// <param name="outputData">outputData.</param>
        /// <param name="workflowTask">workflowTask.</param>
        /// <param name="domain">domain.</param>
        /// <param name="rateLimitPerFrequency">rateLimitPerFrequency.</param>
        /// <param name="rateLimitFrequencyInSeconds">rateLimitFrequencyInSeconds.</param>
        /// <param name="externalInputPayloadStoragePath">externalInputPayloadStoragePath.</param>
        /// <param name="externalOutputPayloadStoragePath">externalOutputPayloadStoragePath.</param>
        /// <param name="workflowPriority">workflowPriority.</param>
        /// <param name="executionNameSpace">executionNameSpace.</param>
        /// <param name="isolationGroupId">isolationGroupId.</param>
        /// <param name="iteration">iteration.</param>
        /// <param name="subWorkflowId">subWorkflowId.</param>
        /// <param name="subworkflowChanged">subworkflowChanged.</param>
        /// <param name="taskDefinition">taskDefinition.</param>
        /// <param name="queueWaitTime">queueWaitTime.</param>
        /// <param name="loopOverTask">loopOverTask.</param>
        public Task(string taskType = default(string), StatusEnum? status = default(StatusEnum?), Dictionary<string, Object> inputData = default(Dictionary<string, Object>), string referenceTaskName = default(string), int retryCount = default(int), int seq = default(int), string correlationId = default(string), int pollCount = default(int), string taskDefName = default(string), long scheduledTime = default(long), long startTime = default(long), long endTime = default(long), long updateTime = default(long), int startDelayInSeconds = default(int), string retriedTaskId = default(string), bool retried = default(bool), bool executed = default(bool), bool callbackFromWorker = default(bool), long responseTimeoutSeconds = default(long), string workflowInstanceId = default(string), string workflowType = default(string), string taskId = default(string), string reasonForIncompletion = default(string), long callbackAfterSeconds = default(long), string workerId = default(string), Dictionary<string, Object> outputData = default(Dictionary<string, Object>), WorkflowTask workflowTask = default(WorkflowTask), string domain = default(string), int rateLimitPerFrequency = default(int), int rateLimitFrequencyInSeconds = default(int), string externalInputPayloadStoragePath = default(string), string externalOutputPayloadStoragePath = default(string), int workflowPriority = default(int), string executionNameSpace = default(string), string isolationGroupId = default(string), int iteration = default(int), string subWorkflowId = default(string), bool subworkflowChanged = default(bool), TaskDef taskDefinition = default(TaskDef), long queueWaitTime = default(long), bool loopOverTask = default(bool))
        {
            this.TaskType = taskType;
            this.Status = status;
            this.InputData = inputData;
            this.ReferenceTaskName = referenceTaskName;
            this.RetryCount = retryCount;
            this.Seq = seq;
            this.CorrelationId = correlationId;
            this.PollCount = pollCount;
            this.TaskDefName = taskDefName;
            this.ScheduledTime = scheduledTime;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.UpdateTime = updateTime;
            this.StartDelayInSeconds = startDelayInSeconds;
            this.RetriedTaskId = retriedTaskId;
            this.Retried = retried;
            this.Executed = executed;
            this.CallbackFromWorker = callbackFromWorker;
            this.ResponseTimeoutSeconds = responseTimeoutSeconds;
            this.WorkflowInstanceId = workflowInstanceId;
            this.WorkflowType = workflowType;
            this.TaskId = taskId;
            this.ReasonForIncompletion = reasonForIncompletion;
            this.CallbackAfterSeconds = callbackAfterSeconds;
            this.WorkerId = workerId;
            this.OutputData = outputData;
            this.WorkflowTask = workflowTask;
            this.Domain = domain;
            this.RateLimitPerFrequency = rateLimitPerFrequency;
            this.RateLimitFrequencyInSeconds = rateLimitFrequencyInSeconds;
            this.ExternalInputPayloadStoragePath = externalInputPayloadStoragePath;
            this.ExternalOutputPayloadStoragePath = externalOutputPayloadStoragePath;
            this.WorkflowPriority = workflowPriority;
            this.ExecutionNameSpace = executionNameSpace;
            this.IsolationGroupId = isolationGroupId;
            this.Iteration = iteration;
            this.SubWorkflowId = subWorkflowId;
            this.SubworkflowChanged = subworkflowChanged;
            this.TaskDefinition = taskDefinition;
            this.QueueWaitTime = queueWaitTime;
            this.LoopOverTask = loopOverTask;
        }

        /// <summary>
        /// Gets or Sets TaskType
        /// </summary>
        [DataMember(Name = "taskType", EmitDefaultValue = false)]
        public string TaskType { get; set; }

        /// <summary>
        /// Gets or Sets InputData
        /// </summary>
        [DataMember(Name = "inputData", EmitDefaultValue = false)]
        public Dictionary<string, Object> InputData { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceTaskName
        /// </summary>
        [DataMember(Name = "referenceTaskName", EmitDefaultValue = false)]
        public string ReferenceTaskName { get; set; }

        /// <summary>
        /// Gets or Sets RetryCount
        /// </summary>
        [DataMember(Name = "retryCount", EmitDefaultValue = false)]
        public int RetryCount { get; set; }

        /// <summary>
        /// Gets or Sets Seq
        /// </summary>
        [DataMember(Name = "seq", EmitDefaultValue = false)]
        public int Seq { get; set; }

        /// <summary>
        /// Gets or Sets CorrelationId
        /// </summary>
        [DataMember(Name = "correlationId", EmitDefaultValue = false)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// Gets or Sets PollCount
        /// </summary>
        [DataMember(Name = "pollCount", EmitDefaultValue = false)]
        public int PollCount { get; set; }

        /// <summary>
        /// Gets or Sets TaskDefName
        /// </summary>
        [DataMember(Name = "taskDefName", EmitDefaultValue = false)]
        public string TaskDefName { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledTime
        /// </summary>
        [DataMember(Name = "scheduledTime", EmitDefaultValue = false)]
        public long ScheduledTime { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        public long StartTime { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        public long EndTime { get; set; }

        /// <summary>
        /// Gets or Sets UpdateTime
        /// </summary>
        [DataMember(Name = "updateTime", EmitDefaultValue = false)]
        public long UpdateTime { get; set; }

        /// <summary>
        /// Gets or Sets StartDelayInSeconds
        /// </summary>
        [DataMember(Name = "startDelayInSeconds", EmitDefaultValue = false)]
        public int StartDelayInSeconds { get; set; }

        /// <summary>
        /// Gets or Sets RetriedTaskId
        /// </summary>
        [DataMember(Name = "retriedTaskId", EmitDefaultValue = false)]
        public string RetriedTaskId { get; set; }

        /// <summary>
        /// Gets or Sets Retried
        /// </summary>
        [DataMember(Name = "retried", EmitDefaultValue = true)]
        public bool Retried { get; set; }

        /// <summary>
        /// Gets or Sets Executed
        /// </summary>
        [DataMember(Name = "executed", EmitDefaultValue = true)]
        public bool Executed { get; set; }

        /// <summary>
        /// Gets or Sets CallbackFromWorker
        /// </summary>
        [DataMember(Name = "callbackFromWorker", EmitDefaultValue = true)]
        public bool CallbackFromWorker { get; set; }

        /// <summary>
        /// Gets or Sets ResponseTimeoutSeconds
        /// </summary>
        [DataMember(Name = "responseTimeoutSeconds", EmitDefaultValue = false)]
        public long ResponseTimeoutSeconds { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowInstanceId
        /// </summary>
        [DataMember(Name = "workflowInstanceId", EmitDefaultValue = false)]
        public string WorkflowInstanceId { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowType
        /// </summary>
        [DataMember(Name = "workflowType", EmitDefaultValue = false)]
        public string WorkflowType { get; set; }

        /// <summary>
        /// Gets or Sets TaskId
        /// </summary>
        [DataMember(Name = "taskId", EmitDefaultValue = false)]
        public string TaskId { get; set; }

        /// <summary>
        /// Gets or Sets ReasonForIncompletion
        /// </summary>
        [DataMember(Name = "reasonForIncompletion", EmitDefaultValue = false)]
        public string ReasonForIncompletion { get; set; }

        /// <summary>
        /// Gets or Sets CallbackAfterSeconds
        /// </summary>
        [DataMember(Name = "callbackAfterSeconds", EmitDefaultValue = false)]
        public long CallbackAfterSeconds { get; set; }

        /// <summary>
        /// Gets or Sets WorkerId
        /// </summary>
        [DataMember(Name = "workerId", EmitDefaultValue = false)]
        public string WorkerId { get; set; }

        /// <summary>
        /// Gets or Sets OutputData
        /// </summary>
        [DataMember(Name = "outputData", EmitDefaultValue = false)]
        public Dictionary<string, Object> OutputData { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowTask
        /// </summary>
        [DataMember(Name = "workflowTask", EmitDefaultValue = false)]
        public WorkflowTask WorkflowTask { get; set; }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name = "domain", EmitDefaultValue = false)]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets RateLimitPerFrequency
        /// </summary>
        [DataMember(Name = "rateLimitPerFrequency", EmitDefaultValue = false)]
        public int RateLimitPerFrequency { get; set; }

        /// <summary>
        /// Gets or Sets RateLimitFrequencyInSeconds
        /// </summary>
        [DataMember(Name = "rateLimitFrequencyInSeconds", EmitDefaultValue = false)]
        public int RateLimitFrequencyInSeconds { get; set; }

        /// <summary>
        /// Gets or Sets ExternalInputPayloadStoragePath
        /// </summary>
        [DataMember(Name = "externalInputPayloadStoragePath", EmitDefaultValue = false)]
        public string ExternalInputPayloadStoragePath { get; set; }

        /// <summary>
        /// Gets or Sets ExternalOutputPayloadStoragePath
        /// </summary>
        [DataMember(Name = "externalOutputPayloadStoragePath", EmitDefaultValue = false)]
        public string ExternalOutputPayloadStoragePath { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowPriority
        /// </summary>
        [DataMember(Name = "workflowPriority", EmitDefaultValue = false)]
        public int WorkflowPriority { get; set; }

        /// <summary>
        /// Gets or Sets ExecutionNameSpace
        /// </summary>
        [DataMember(Name = "executionNameSpace", EmitDefaultValue = false)]
        public string ExecutionNameSpace { get; set; }

        /// <summary>
        /// Gets or Sets IsolationGroupId
        /// </summary>
        [DataMember(Name = "isolationGroupId", EmitDefaultValue = false)]
        public string IsolationGroupId { get; set; }

        /// <summary>
        /// Gets or Sets Iteration
        /// </summary>
        [DataMember(Name = "iteration", EmitDefaultValue = false)]
        public int Iteration { get; set; }

        /// <summary>
        /// Gets or Sets SubWorkflowId
        /// </summary>
        [DataMember(Name = "subWorkflowId", EmitDefaultValue = false)]
        public string SubWorkflowId { get; set; }

        /// <summary>
        /// Gets or Sets SubworkflowChanged
        /// </summary>
        [DataMember(Name = "subworkflowChanged", EmitDefaultValue = true)]
        public bool SubworkflowChanged { get; set; }

        /// <summary>
        /// Gets or Sets TaskDefinition
        /// </summary>
        [DataMember(Name = "taskDefinition", EmitDefaultValue = false)]
        public TaskDef TaskDefinition { get; set; }

        /// <summary>
        /// Gets or Sets QueueWaitTime
        /// </summary>
        [DataMember(Name = "queueWaitTime", EmitDefaultValue = false)]
        public long QueueWaitTime { get; set; }

        /// <summary>
        /// Gets or Sets LoopOverTask
        /// </summary>
        [DataMember(Name = "loopOverTask", EmitDefaultValue = true)]
        public bool LoopOverTask { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Task {\n");
            sb.Append("  TaskType: ").Append(TaskType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  InputData: ").Append(InputData).Append("\n");
            sb.Append("  ReferenceTaskName: ").Append(ReferenceTaskName).Append("\n");
            sb.Append("  RetryCount: ").Append(RetryCount).Append("\n");
            sb.Append("  Seq: ").Append(Seq).Append("\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  PollCount: ").Append(PollCount).Append("\n");
            sb.Append("  TaskDefName: ").Append(TaskDefName).Append("\n");
            sb.Append("  ScheduledTime: ").Append(ScheduledTime).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("  StartDelayInSeconds: ").Append(StartDelayInSeconds).Append("\n");
            sb.Append("  RetriedTaskId: ").Append(RetriedTaskId).Append("\n");
            sb.Append("  Retried: ").Append(Retried).Append("\n");
            sb.Append("  Executed: ").Append(Executed).Append("\n");
            sb.Append("  CallbackFromWorker: ").Append(CallbackFromWorker).Append("\n");
            sb.Append("  ResponseTimeoutSeconds: ").Append(ResponseTimeoutSeconds).Append("\n");
            sb.Append("  WorkflowInstanceId: ").Append(WorkflowInstanceId).Append("\n");
            sb.Append("  WorkflowType: ").Append(WorkflowType).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  ReasonForIncompletion: ").Append(ReasonForIncompletion).Append("\n");
            sb.Append("  CallbackAfterSeconds: ").Append(CallbackAfterSeconds).Append("\n");
            sb.Append("  WorkerId: ").Append(WorkerId).Append("\n");
            sb.Append("  OutputData: ").Append(OutputData).Append("\n");
            sb.Append("  WorkflowTask: ").Append(WorkflowTask).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  RateLimitPerFrequency: ").Append(RateLimitPerFrequency).Append("\n");
            sb.Append("  RateLimitFrequencyInSeconds: ").Append(RateLimitFrequencyInSeconds).Append("\n");
            sb.Append("  ExternalInputPayloadStoragePath: ").Append(ExternalInputPayloadStoragePath).Append("\n");
            sb.Append("  ExternalOutputPayloadStoragePath: ").Append(ExternalOutputPayloadStoragePath).Append("\n");
            sb.Append("  WorkflowPriority: ").Append(WorkflowPriority).Append("\n");
            sb.Append("  ExecutionNameSpace: ").Append(ExecutionNameSpace).Append("\n");
            sb.Append("  IsolationGroupId: ").Append(IsolationGroupId).Append("\n");
            sb.Append("  Iteration: ").Append(Iteration).Append("\n");
            sb.Append("  SubWorkflowId: ").Append(SubWorkflowId).Append("\n");
            sb.Append("  SubworkflowChanged: ").Append(SubworkflowChanged).Append("\n");
            sb.Append("  TaskDefinition: ").Append(TaskDefinition).Append("\n");
            sb.Append("  QueueWaitTime: ").Append(QueueWaitTime).Append("\n");
            sb.Append("  LoopOverTask: ").Append(LoopOverTask).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
