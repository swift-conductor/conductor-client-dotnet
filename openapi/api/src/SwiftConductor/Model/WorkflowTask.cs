/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SwiftConductor.Client.OpenAPIDateConverter;

namespace SwiftConductor.Model
{
    /// <summary>
    /// WorkflowTask
    /// </summary>
    [DataContract(Name = "WorkflowTask")]
    public partial class WorkflowTask : IValidatableObject
    {
        /// <summary>
        /// Defines WorkflowTaskType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WorkflowTaskTypeEnum
        {
            /// <summary>
            /// Enum CUSTOM for value: CUSTOM
            /// </summary>
            [EnumMember(Value = "CUSTOM")]
            CUSTOM = 1,

            /// <summary>
            /// Enum DYNAMIC for value: DYNAMIC
            /// </summary>
            [EnumMember(Value = "DYNAMIC")]
            DYNAMIC = 2,

            /// <summary>
            /// Enum FORKJOIN for value: FORK_JOIN
            /// </summary>
            [EnumMember(Value = "FORK_JOIN")]
            FORKJOIN = 3,

            /// <summary>
            /// Enum FORKJOINDYNAMIC for value: FORK_JOIN_DYNAMIC
            /// </summary>
            [EnumMember(Value = "FORK_JOIN_DYNAMIC")]
            FORKJOINDYNAMIC = 4,

            /// <summary>
            /// Enum DECISION for value: DECISION
            /// </summary>
            [EnumMember(Value = "DECISION")]
            DECISION = 5,

            /// <summary>
            /// Enum SWITCH for value: SWITCH
            /// </summary>
            [EnumMember(Value = "SWITCH")]
            SWITCH = 6,

            /// <summary>
            /// Enum JOIN for value: JOIN
            /// </summary>
            [EnumMember(Value = "JOIN")]
            JOIN = 7,

            /// <summary>
            /// Enum DOWHILE for value: DO_WHILE
            /// </summary>
            [EnumMember(Value = "DO_WHILE")]
            DOWHILE = 8,

            /// <summary>
            /// Enum SUBWORKFLOW for value: SUB_WORKFLOW
            /// </summary>
            [EnumMember(Value = "SUB_WORKFLOW")]
            SUBWORKFLOW = 9,

            /// <summary>
            /// Enum STARTWORKFLOW for value: START_WORKFLOW
            /// </summary>
            [EnumMember(Value = "START_WORKFLOW")]
            STARTWORKFLOW = 10,

            /// <summary>
            /// Enum EVENT for value: EVENT
            /// </summary>
            [EnumMember(Value = "EVENT")]
            EVENT = 11,

            /// <summary>
            /// Enum WAIT for value: WAIT
            /// </summary>
            [EnumMember(Value = "WAIT")]
            WAIT = 12,

            /// <summary>
            /// Enum HUMAN for value: HUMAN
            /// </summary>
            [EnumMember(Value = "HUMAN")]
            HUMAN = 13,

            /// <summary>
            /// Enum USERDEFINED for value: USER_DEFINED
            /// </summary>
            [EnumMember(Value = "USER_DEFINED")]
            USERDEFINED = 14,

            /// <summary>
            /// Enum HTTP for value: HTTP
            /// </summary>
            [EnumMember(Value = "HTTP")]
            HTTP = 15,

            /// <summary>
            /// Enum LAMBDA for value: LAMBDA
            /// </summary>
            [EnumMember(Value = "LAMBDA")]
            LAMBDA = 16,

            /// <summary>
            /// Enum INLINE for value: INLINE
            /// </summary>
            [EnumMember(Value = "INLINE")]
            INLINE = 17,

            /// <summary>
            /// Enum EXCLUSIVEJOIN for value: EXCLUSIVE_JOIN
            /// </summary>
            [EnumMember(Value = "EXCLUSIVE_JOIN")]
            EXCLUSIVEJOIN = 18,

            /// <summary>
            /// Enum TERMINATE for value: TERMINATE
            /// </summary>
            [EnumMember(Value = "TERMINATE")]
            TERMINATE = 19,

            /// <summary>
            /// Enum KAFKAPUBLISH for value: KAFKA_PUBLISH
            /// </summary>
            [EnumMember(Value = "KAFKA_PUBLISH")]
            KAFKAPUBLISH = 20,

            /// <summary>
            /// Enum JSONJQTRANSFORM for value: JSON_JQ_TRANSFORM
            /// </summary>
            [EnumMember(Value = "JSON_JQ_TRANSFORM")]
            JSONJQTRANSFORM = 21,

            /// <summary>
            /// Enum SETVARIABLE for value: SET_VARIABLE
            /// </summary>
            [EnumMember(Value = "SET_VARIABLE")]
            SETVARIABLE = 22,

            /// <summary>
            /// Enum NOOP for value: NOOP
            /// </summary>
            [EnumMember(Value = "NOOP")]
            NOOP = 23
        }


        /// <summary>
        /// Gets or Sets WorkflowTaskType
        /// </summary>
        [DataMember(Name = "workflowTaskType", EmitDefaultValue = false)]
        public WorkflowTaskTypeEnum? WorkflowTaskType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowTask" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkflowTask() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowTask" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="taskReferenceName">taskReferenceName (required).</param>
        /// <param name="description">description.</param>
        /// <param name="inputParameters">inputParameters.</param>
        /// <param name="type">type.</param>
        /// <param name="dynamicTaskNameParam">dynamicTaskNameParam.</param>
        /// <param name="caseValueParam">caseValueParam.</param>
        /// <param name="caseExpression">caseExpression.</param>
        /// <param name="scriptExpression">scriptExpression.</param>
        /// <param name="decisionCases">decisionCases.</param>
        /// <param name="dynamicForkJoinTasksParam">dynamicForkJoinTasksParam.</param>
        /// <param name="dynamicForkTasksParam">dynamicForkTasksParam.</param>
        /// <param name="dynamicForkTasksInputParamName">dynamicForkTasksInputParamName.</param>
        /// <param name="defaultCase">defaultCase.</param>
        /// <param name="forkTasks">forkTasks.</param>
        /// <param name="startDelay">startDelay.</param>
        /// <param name="subWorkflowParam">subWorkflowParam.</param>
        /// <param name="joinOn">joinOn.</param>
        /// <param name="sink">sink.</param>
        /// <param name="optional">optional.</param>
        /// <param name="taskDefinition">taskDefinition.</param>
        /// <param name="rateLimited">rateLimited.</param>
        /// <param name="defaultExclusiveJoinTask">defaultExclusiveJoinTask.</param>
        /// <param name="asyncComplete">asyncComplete.</param>
        /// <param name="loopCondition">loopCondition.</param>
        /// <param name="loopOver">loopOver.</param>
        /// <param name="retryCount">retryCount.</param>
        /// <param name="evaluatorType">evaluatorType.</param>
        /// <param name="expression">expression.</param>
        /// <param name="workflowTaskType">workflowTaskType.</param>
        public WorkflowTask(string name = default(string), string taskReferenceName = default(string), string description = default(string), Dictionary<string, Object> inputParameters = default(Dictionary<string, Object>), string type = default(string), string dynamicTaskNameParam = default(string), string caseValueParam = default(string), string caseExpression = default(string), string scriptExpression = default(string), Dictionary<string, List<WorkflowTask>> decisionCases = default(Dictionary<string, List<WorkflowTask>>), string dynamicForkJoinTasksParam = default(string), string dynamicForkTasksParam = default(string), string dynamicForkTasksInputParamName = default(string), List<WorkflowTask> defaultCase = default(List<WorkflowTask>), List<List<WorkflowTask>> forkTasks = default(List<List<WorkflowTask>>), int startDelay = default(int), SubWorkflowParams subWorkflowParam = default(SubWorkflowParams), List<string> joinOn = default(List<string>), string sink = default(string), bool optional = default(bool), TaskDef taskDefinition = default(TaskDef), bool rateLimited = default(bool), List<string> defaultExclusiveJoinTask = default(List<string>), bool asyncComplete = default(bool), string loopCondition = default(string), List<WorkflowTask> loopOver = default(List<WorkflowTask>), int retryCount = default(int), string evaluatorType = default(string), string expression = default(string), WorkflowTaskTypeEnum? workflowTaskType = default(WorkflowTaskTypeEnum?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for WorkflowTask and cannot be null");
            }
            this.Name = name;
            // to ensure "taskReferenceName" is required (not null)
            if (taskReferenceName == null)
            {
                throw new ArgumentNullException("taskReferenceName is a required property for WorkflowTask and cannot be null");
            }
            this.TaskReferenceName = taskReferenceName;
            this.Description = description;
            this.InputParameters = inputParameters;
            this.Type = type;
            this.DynamicTaskNameParam = dynamicTaskNameParam;
            this.CaseValueParam = caseValueParam;
            this.CaseExpression = caseExpression;
            this.ScriptExpression = scriptExpression;
            this.DecisionCases = decisionCases;
            this.DynamicForkJoinTasksParam = dynamicForkJoinTasksParam;
            this.DynamicForkTasksParam = dynamicForkTasksParam;
            this.DynamicForkTasksInputParamName = dynamicForkTasksInputParamName;
            this.DefaultCase = defaultCase;
            this.ForkTasks = forkTasks;
            this.StartDelay = startDelay;
            this.SubWorkflowParam = subWorkflowParam;
            this.JoinOn = joinOn;
            this.Sink = sink;
            this.Optional = optional;
            this.TaskDefinition = taskDefinition;
            this.RateLimited = rateLimited;
            this.DefaultExclusiveJoinTask = defaultExclusiveJoinTask;
            this.AsyncComplete = asyncComplete;
            this.LoopCondition = loopCondition;
            this.LoopOver = loopOver;
            this.RetryCount = retryCount;
            this.EvaluatorType = evaluatorType;
            this.Expression = expression;
            this.WorkflowTaskType = workflowTaskType;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TaskReferenceName
        /// </summary>
        [DataMember(Name = "taskReferenceName", IsRequired = true, EmitDefaultValue = true)]
        public string TaskReferenceName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets InputParameters
        /// </summary>
        [DataMember(Name = "inputParameters", EmitDefaultValue = false)]
        public Dictionary<string, Object> InputParameters { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets DynamicTaskNameParam
        /// </summary>
        [DataMember(Name = "dynamicTaskNameParam", EmitDefaultValue = false)]
        public string DynamicTaskNameParam { get; set; }

        /// <summary>
        /// Gets or Sets CaseValueParam
        /// </summary>
        [DataMember(Name = "caseValueParam", EmitDefaultValue = false)]
        [Obsolete]
        public string CaseValueParam { get; set; }

        /// <summary>
        /// Gets or Sets CaseExpression
        /// </summary>
        [DataMember(Name = "caseExpression", EmitDefaultValue = false)]
        [Obsolete]
        public string CaseExpression { get; set; }

        /// <summary>
        /// Gets or Sets ScriptExpression
        /// </summary>
        [DataMember(Name = "scriptExpression", EmitDefaultValue = false)]
        public string ScriptExpression { get; set; }

        /// <summary>
        /// Gets or Sets DecisionCases
        /// </summary>
        [DataMember(Name = "decisionCases", EmitDefaultValue = false)]
        public Dictionary<string, List<WorkflowTask>> DecisionCases { get; set; }

        /// <summary>
        /// Gets or Sets DynamicForkJoinTasksParam
        /// </summary>
        [DataMember(Name = "dynamicForkJoinTasksParam", EmitDefaultValue = false)]
        [Obsolete]
        public string DynamicForkJoinTasksParam { get; set; }

        /// <summary>
        /// Gets or Sets DynamicForkTasksParam
        /// </summary>
        [DataMember(Name = "dynamicForkTasksParam", EmitDefaultValue = false)]
        public string DynamicForkTasksParam { get; set; }

        /// <summary>
        /// Gets or Sets DynamicForkTasksInputParamName
        /// </summary>
        [DataMember(Name = "dynamicForkTasksInputParamName", EmitDefaultValue = false)]
        public string DynamicForkTasksInputParamName { get; set; }

        /// <summary>
        /// Gets or Sets DefaultCase
        /// </summary>
        [DataMember(Name = "defaultCase", EmitDefaultValue = false)]
        public List<WorkflowTask> DefaultCase { get; set; }

        /// <summary>
        /// Gets or Sets ForkTasks
        /// </summary>
        [DataMember(Name = "forkTasks", EmitDefaultValue = false)]
        public List<List<WorkflowTask>> ForkTasks { get; set; }

        /// <summary>
        /// Gets or Sets StartDelay
        /// </summary>
        [DataMember(Name = "startDelay", EmitDefaultValue = false)]
        public int StartDelay { get; set; }

        /// <summary>
        /// Gets or Sets SubWorkflowParam
        /// </summary>
        [DataMember(Name = "subWorkflowParam", EmitDefaultValue = false)]
        public SubWorkflowParams SubWorkflowParam { get; set; }

        /// <summary>
        /// Gets or Sets JoinOn
        /// </summary>
        [DataMember(Name = "joinOn", EmitDefaultValue = false)]
        public List<string> JoinOn { get; set; }

        /// <summary>
        /// Gets or Sets Sink
        /// </summary>
        [DataMember(Name = "sink", EmitDefaultValue = false)]
        public string Sink { get; set; }

        /// <summary>
        /// Gets or Sets Optional
        /// </summary>
        [DataMember(Name = "optional", EmitDefaultValue = true)]
        public bool Optional { get; set; }

        /// <summary>
        /// Gets or Sets TaskDefinition
        /// </summary>
        [DataMember(Name = "taskDefinition", EmitDefaultValue = false)]
        public TaskDef TaskDefinition { get; set; }

        /// <summary>
        /// Gets or Sets RateLimited
        /// </summary>
        [DataMember(Name = "rateLimited", EmitDefaultValue = true)]
        public bool RateLimited { get; set; }

        /// <summary>
        /// Gets or Sets DefaultExclusiveJoinTask
        /// </summary>
        [DataMember(Name = "defaultExclusiveJoinTask", EmitDefaultValue = false)]
        public List<string> DefaultExclusiveJoinTask { get; set; }

        /// <summary>
        /// Gets or Sets AsyncComplete
        /// </summary>
        [DataMember(Name = "asyncComplete", EmitDefaultValue = true)]
        public bool AsyncComplete { get; set; }

        /// <summary>
        /// Gets or Sets LoopCondition
        /// </summary>
        [DataMember(Name = "loopCondition", EmitDefaultValue = false)]
        public string LoopCondition { get; set; }

        /// <summary>
        /// Gets or Sets LoopOver
        /// </summary>
        [DataMember(Name = "loopOver", EmitDefaultValue = false)]
        public List<WorkflowTask> LoopOver { get; set; }

        /// <summary>
        /// Gets or Sets RetryCount
        /// </summary>
        [DataMember(Name = "retryCount", EmitDefaultValue = false)]
        public int RetryCount { get; set; }

        /// <summary>
        /// Gets or Sets EvaluatorType
        /// </summary>
        [DataMember(Name = "evaluatorType", EmitDefaultValue = false)]
        public string EvaluatorType { get; set; }

        /// <summary>
        /// Gets or Sets Expression
        /// </summary>
        [DataMember(Name = "expression", EmitDefaultValue = false)]
        public string Expression { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowTask {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TaskReferenceName: ").Append(TaskReferenceName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  InputParameters: ").Append(InputParameters).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DynamicTaskNameParam: ").Append(DynamicTaskNameParam).Append("\n");
            sb.Append("  CaseValueParam: ").Append(CaseValueParam).Append("\n");
            sb.Append("  CaseExpression: ").Append(CaseExpression).Append("\n");
            sb.Append("  ScriptExpression: ").Append(ScriptExpression).Append("\n");
            sb.Append("  DecisionCases: ").Append(DecisionCases).Append("\n");
            sb.Append("  DynamicForkJoinTasksParam: ").Append(DynamicForkJoinTasksParam).Append("\n");
            sb.Append("  DynamicForkTasksParam: ").Append(DynamicForkTasksParam).Append("\n");
            sb.Append("  DynamicForkTasksInputParamName: ").Append(DynamicForkTasksInputParamName).Append("\n");
            sb.Append("  DefaultCase: ").Append(DefaultCase).Append("\n");
            sb.Append("  ForkTasks: ").Append(ForkTasks).Append("\n");
            sb.Append("  StartDelay: ").Append(StartDelay).Append("\n");
            sb.Append("  SubWorkflowParam: ").Append(SubWorkflowParam).Append("\n");
            sb.Append("  JoinOn: ").Append(JoinOn).Append("\n");
            sb.Append("  Sink: ").Append(Sink).Append("\n");
            sb.Append("  Optional: ").Append(Optional).Append("\n");
            sb.Append("  TaskDefinition: ").Append(TaskDefinition).Append("\n");
            sb.Append("  RateLimited: ").Append(RateLimited).Append("\n");
            sb.Append("  DefaultExclusiveJoinTask: ").Append(DefaultExclusiveJoinTask).Append("\n");
            sb.Append("  AsyncComplete: ").Append(AsyncComplete).Append("\n");
            sb.Append("  LoopCondition: ").Append(LoopCondition).Append("\n");
            sb.Append("  LoopOver: ").Append(LoopOver).Append("\n");
            sb.Append("  RetryCount: ").Append(RetryCount).Append("\n");
            sb.Append("  EvaluatorType: ").Append(EvaluatorType).Append("\n");
            sb.Append("  Expression: ").Append(Expression).Append("\n");
            sb.Append("  WorkflowTaskType: ").Append(WorkflowTaskType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
