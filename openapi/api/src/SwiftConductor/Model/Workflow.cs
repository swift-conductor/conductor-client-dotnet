/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SwiftConductor.Client.OpenAPIDateConverter;

namespace SwiftConductor.Model
{
    /// <summary>
    /// Workflow
    /// </summary>
    [DataContract(Name = "Workflow")]
    public partial class Workflow : IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum RUNNING for value: RUNNING
            /// </summary>
            [EnumMember(Value = "RUNNING")]
            RUNNING = 1,

            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 2,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 3,

            /// <summary>
            /// Enum TIMEDOUT for value: TIMED_OUT
            /// </summary>
            [EnumMember(Value = "TIMED_OUT")]
            TIMEDOUT = 4,

            /// <summary>
            /// Enum TERMINATED for value: TERMINATED
            /// </summary>
            [EnumMember(Value = "TERMINATED")]
            TERMINATED = 5,

            /// <summary>
            /// Enum PAUSED for value: PAUSED
            /// </summary>
            [EnumMember(Value = "PAUSED")]
            PAUSED = 6
        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Workflow" /> class.
        /// </summary>
        /// <param name="ownerApp">ownerApp.</param>
        /// <param name="createTime">createTime.</param>
        /// <param name="updateTime">updateTime.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="updatedBy">updatedBy.</param>
        /// <param name="status">status.</param>
        /// <param name="endTime">endTime.</param>
        /// <param name="workflowId">workflowId.</param>
        /// <param name="parentWorkflowId">parentWorkflowId.</param>
        /// <param name="parentWorkflowTaskId">parentWorkflowTaskId.</param>
        /// <param name="tasks">tasks.</param>
        /// <param name="input">input.</param>
        /// <param name="output">output.</param>
        /// <param name="correlationId">correlationId.</param>
        /// <param name="reRunFromWorkflowId">reRunFromWorkflowId.</param>
        /// <param name="reasonForIncompletion">reasonForIncompletion.</param>
        /// <param name="varEvent">varEvent.</param>
        /// <param name="taskToDomain">taskToDomain.</param>
        /// <param name="failedReferenceTaskNames">failedReferenceTaskNames.</param>
        /// <param name="workflowDefinition">workflowDefinition.</param>
        /// <param name="externalInputPayloadStoragePath">externalInputPayloadStoragePath.</param>
        /// <param name="externalOutputPayloadStoragePath">externalOutputPayloadStoragePath.</param>
        /// <param name="priority">priority.</param>
        /// <param name="variables">variables.</param>
        /// <param name="lastRetriedTime">lastRetriedTime.</param>
        /// <param name="failedTaskNames">failedTaskNames.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="workflowName">workflowName.</param>
        /// <param name="workflowVersion">workflowVersion.</param>
        public Workflow(string ownerApp = default(string), long createTime = default(long), long updateTime = default(long), string createdBy = default(string), string updatedBy = default(string), StatusEnum? status = default(StatusEnum?), long endTime = default(long), string workflowId = default(string), string parentWorkflowId = default(string), string parentWorkflowTaskId = default(string), List<Task> tasks = default(List<Task>), Dictionary<string, Object> input = default(Dictionary<string, Object>), Dictionary<string, Object> output = default(Dictionary<string, Object>), string correlationId = default(string), string reRunFromWorkflowId = default(string), string reasonForIncompletion = default(string), string varEvent = default(string), Dictionary<string, string> taskToDomain = default(Dictionary<string, string>), List<string> failedReferenceTaskNames = default(List<string>), WorkflowDef workflowDefinition = default(WorkflowDef), string externalInputPayloadStoragePath = default(string), string externalOutputPayloadStoragePath = default(string), int priority = default(int), Dictionary<string, Object> variables = default(Dictionary<string, Object>), long lastRetriedTime = default(long), List<string> failedTaskNames = default(List<string>), long startTime = default(long), string workflowName = default(string), int workflowVersion = default(int))
        {
            this.OwnerApp = ownerApp;
            this.CreateTime = createTime;
            this.UpdateTime = updateTime;
            this.CreatedBy = createdBy;
            this.UpdatedBy = updatedBy;
            this.Status = status;
            this.EndTime = endTime;
            this.WorkflowId = workflowId;
            this.ParentWorkflowId = parentWorkflowId;
            this.ParentWorkflowTaskId = parentWorkflowTaskId;
            this.Tasks = tasks;
            this.Input = input;
            this.Output = output;
            this.CorrelationId = correlationId;
            this.ReRunFromWorkflowId = reRunFromWorkflowId;
            this.ReasonForIncompletion = reasonForIncompletion;
            this.VarEvent = varEvent;
            this.TaskToDomain = taskToDomain;
            this.FailedReferenceTaskNames = failedReferenceTaskNames;
            this.WorkflowDefinition = workflowDefinition;
            this.ExternalInputPayloadStoragePath = externalInputPayloadStoragePath;
            this.ExternalOutputPayloadStoragePath = externalOutputPayloadStoragePath;
            this.Priority = priority;
            this.Variables = variables;
            this.LastRetriedTime = lastRetriedTime;
            this.FailedTaskNames = failedTaskNames;
            this.StartTime = startTime;
            this.WorkflowName = workflowName;
            this.WorkflowVersion = workflowVersion;
        }

        /// <summary>
        /// Gets or Sets OwnerApp
        /// </summary>
        [DataMember(Name = "ownerApp", EmitDefaultValue = false)]
        public string OwnerApp { get; set; }

        /// <summary>
        /// Gets or Sets CreateTime
        /// </summary>
        [DataMember(Name = "createTime", EmitDefaultValue = false)]
        public long CreateTime { get; set; }

        /// <summary>
        /// Gets or Sets UpdateTime
        /// </summary>
        [DataMember(Name = "updateTime", EmitDefaultValue = false)]
        public long UpdateTime { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name = "updatedBy", EmitDefaultValue = false)]
        public string UpdatedBy { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        public long EndTime { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowId
        /// </summary>
        [DataMember(Name = "workflowId", EmitDefaultValue = false)]
        public string WorkflowId { get; set; }

        /// <summary>
        /// Gets or Sets ParentWorkflowId
        /// </summary>
        [DataMember(Name = "parentWorkflowId", EmitDefaultValue = false)]
        public string ParentWorkflowId { get; set; }

        /// <summary>
        /// Gets or Sets ParentWorkflowTaskId
        /// </summary>
        [DataMember(Name = "parentWorkflowTaskId", EmitDefaultValue = false)]
        public string ParentWorkflowTaskId { get; set; }

        /// <summary>
        /// Gets or Sets Tasks
        /// </summary>
        [DataMember(Name = "tasks", EmitDefaultValue = false)]
        public List<Task> Tasks { get; set; }

        /// <summary>
        /// Gets or Sets Input
        /// </summary>
        [DataMember(Name = "input", EmitDefaultValue = false)]
        public Dictionary<string, Object> Input { get; set; }

        /// <summary>
        /// Gets or Sets Output
        /// </summary>
        [DataMember(Name = "output", EmitDefaultValue = false)]
        public Dictionary<string, Object> Output { get; set; }

        /// <summary>
        /// Gets or Sets CorrelationId
        /// </summary>
        [DataMember(Name = "correlationId", EmitDefaultValue = false)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// Gets or Sets ReRunFromWorkflowId
        /// </summary>
        [DataMember(Name = "reRunFromWorkflowId", EmitDefaultValue = false)]
        public string ReRunFromWorkflowId { get; set; }

        /// <summary>
        /// Gets or Sets ReasonForIncompletion
        /// </summary>
        [DataMember(Name = "reasonForIncompletion", EmitDefaultValue = false)]
        public string ReasonForIncompletion { get; set; }

        /// <summary>
        /// Gets or Sets VarEvent
        /// </summary>
        [DataMember(Name = "event", EmitDefaultValue = false)]
        public string VarEvent { get; set; }

        /// <summary>
        /// Gets or Sets TaskToDomain
        /// </summary>
        [DataMember(Name = "taskToDomain", EmitDefaultValue = false)]
        public Dictionary<string, string> TaskToDomain { get; set; }

        /// <summary>
        /// Gets or Sets FailedReferenceTaskNames
        /// </summary>
        [DataMember(Name = "failedReferenceTaskNames", EmitDefaultValue = false)]
        public List<string> FailedReferenceTaskNames { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowDefinition
        /// </summary>
        [DataMember(Name = "workflowDefinition", EmitDefaultValue = false)]
        public WorkflowDef WorkflowDefinition { get; set; }

        /// <summary>
        /// Gets or Sets ExternalInputPayloadStoragePath
        /// </summary>
        [DataMember(Name = "externalInputPayloadStoragePath", EmitDefaultValue = false)]
        public string ExternalInputPayloadStoragePath { get; set; }

        /// <summary>
        /// Gets or Sets ExternalOutputPayloadStoragePath
        /// </summary>
        [DataMember(Name = "externalOutputPayloadStoragePath", EmitDefaultValue = false)]
        public string ExternalOutputPayloadStoragePath { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public int Priority { get; set; }

        /// <summary>
        /// Gets or Sets Variables
        /// </summary>
        [DataMember(Name = "variables", EmitDefaultValue = false)]
        public Dictionary<string, Object> Variables { get; set; }

        /// <summary>
        /// Gets or Sets LastRetriedTime
        /// </summary>
        [DataMember(Name = "lastRetriedTime", EmitDefaultValue = false)]
        public long LastRetriedTime { get; set; }

        /// <summary>
        /// Gets or Sets FailedTaskNames
        /// </summary>
        [DataMember(Name = "failedTaskNames", EmitDefaultValue = false)]
        public List<string> FailedTaskNames { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        public long StartTime { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowName
        /// </summary>
        [DataMember(Name = "workflowName", EmitDefaultValue = false)]
        public string WorkflowName { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowVersion
        /// </summary>
        [DataMember(Name = "workflowVersion", EmitDefaultValue = false)]
        public int WorkflowVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Workflow {\n");
            sb.Append("  OwnerApp: ").Append(OwnerApp).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  WorkflowId: ").Append(WorkflowId).Append("\n");
            sb.Append("  ParentWorkflowId: ").Append(ParentWorkflowId).Append("\n");
            sb.Append("  ParentWorkflowTaskId: ").Append(ParentWorkflowTaskId).Append("\n");
            sb.Append("  Tasks: ").Append(Tasks).Append("\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Output: ").Append(Output).Append("\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  ReRunFromWorkflowId: ").Append(ReRunFromWorkflowId).Append("\n");
            sb.Append("  ReasonForIncompletion: ").Append(ReasonForIncompletion).Append("\n");
            sb.Append("  VarEvent: ").Append(VarEvent).Append("\n");
            sb.Append("  TaskToDomain: ").Append(TaskToDomain).Append("\n");
            sb.Append("  FailedReferenceTaskNames: ").Append(FailedReferenceTaskNames).Append("\n");
            sb.Append("  WorkflowDefinition: ").Append(WorkflowDefinition).Append("\n");
            sb.Append("  ExternalInputPayloadStoragePath: ").Append(ExternalInputPayloadStoragePath).Append("\n");
            sb.Append("  ExternalOutputPayloadStoragePath: ").Append(ExternalOutputPayloadStoragePath).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("  LastRetriedTime: ").Append(LastRetriedTime).Append("\n");
            sb.Append("  FailedTaskNames: ").Append(FailedTaskNames).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  WorkflowName: ").Append(WorkflowName).Append("\n");
            sb.Append("  WorkflowVersion: ").Append(WorkflowVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Priority (int) maximum
            if (this.Priority > (int)99)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Priority, must be a value less than or equal to 99.", new [] { "Priority" });
            }

            // Priority (int) minimum
            if (this.Priority < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Priority, must be a value greater than or equal to 0.", new [] { "Priority" });
            }

            yield break;
        }
    }

}
