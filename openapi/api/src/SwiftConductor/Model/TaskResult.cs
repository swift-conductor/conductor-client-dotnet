/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SwiftConductor.Client.OpenAPIDateConverter;

namespace SwiftConductor.Model
{
    /// <summary>
    /// TaskResult
    /// </summary>
    [DataContract(Name = "TaskResult")]
    public partial class TaskResult : IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum INPROGRESS for value: IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")]
            INPROGRESS = 1,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 2,

            /// <summary>
            /// Enum FAILEDWITHTERMINALERROR for value: FAILED_WITH_TERMINAL_ERROR
            /// </summary>
            [EnumMember(Value = "FAILED_WITH_TERMINAL_ERROR")]
            FAILEDWITHTERMINALERROR = 3,

            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 4
        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TaskResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskResult" /> class.
        /// </summary>
        /// <param name="workflowInstanceId">workflowInstanceId (required).</param>
        /// <param name="taskId">taskId (required).</param>
        /// <param name="reasonForIncompletion">reasonForIncompletion.</param>
        /// <param name="callbackAfterSeconds">callbackAfterSeconds.</param>
        /// <param name="workerId">workerId.</param>
        /// <param name="status">status.</param>
        /// <param name="outputData">outputData.</param>
        /// <param name="logs">logs.</param>
        /// <param name="externalOutputPayloadStoragePath">externalOutputPayloadStoragePath.</param>
        /// <param name="subWorkflowId">subWorkflowId.</param>
        /// <param name="extendLease">extendLease.</param>
        public TaskResult(string workflowInstanceId = default(string), string taskId = default(string), string reasonForIncompletion = default(string), long callbackAfterSeconds = default(long), string workerId = default(string), StatusEnum? status = default(StatusEnum?), Dictionary<string, Object> outputData = default(Dictionary<string, Object>), List<TaskExecLog> logs = default(List<TaskExecLog>), string externalOutputPayloadStoragePath = default(string), string subWorkflowId = default(string), bool extendLease = default(bool))
        {
            // to ensure "workflowInstanceId" is required (not null)
            if (workflowInstanceId == null)
            {
                throw new ArgumentNullException("workflowInstanceId is a required property for TaskResult and cannot be null");
            }
            this.WorkflowInstanceId = workflowInstanceId;
            // to ensure "taskId" is required (not null)
            if (taskId == null)
            {
                throw new ArgumentNullException("taskId is a required property for TaskResult and cannot be null");
            }
            this.TaskId = taskId;
            this.ReasonForIncompletion = reasonForIncompletion;
            this.CallbackAfterSeconds = callbackAfterSeconds;
            this.WorkerId = workerId;
            this.Status = status;
            this.OutputData = outputData;
            this.Logs = logs;
            this.ExternalOutputPayloadStoragePath = externalOutputPayloadStoragePath;
            this.SubWorkflowId = subWorkflowId;
            this.ExtendLease = extendLease;
        }

        /// <summary>
        /// Gets or Sets WorkflowInstanceId
        /// </summary>
        [DataMember(Name = "workflowInstanceId", IsRequired = true, EmitDefaultValue = true)]
        public string WorkflowInstanceId { get; set; }

        /// <summary>
        /// Gets or Sets TaskId
        /// </summary>
        [DataMember(Name = "taskId", IsRequired = true, EmitDefaultValue = true)]
        public string TaskId { get; set; }

        /// <summary>
        /// Gets or Sets ReasonForIncompletion
        /// </summary>
        [DataMember(Name = "reasonForIncompletion", EmitDefaultValue = false)]
        public string ReasonForIncompletion { get; set; }

        /// <summary>
        /// Gets or Sets CallbackAfterSeconds
        /// </summary>
        [DataMember(Name = "callbackAfterSeconds", EmitDefaultValue = false)]
        public long CallbackAfterSeconds { get; set; }

        /// <summary>
        /// Gets or Sets WorkerId
        /// </summary>
        [DataMember(Name = "workerId", EmitDefaultValue = false)]
        public string WorkerId { get; set; }

        /// <summary>
        /// Gets or Sets OutputData
        /// </summary>
        [DataMember(Name = "outputData", EmitDefaultValue = false)]
        public Dictionary<string, Object> OutputData { get; set; }

        /// <summary>
        /// Gets or Sets Logs
        /// </summary>
        [DataMember(Name = "logs", EmitDefaultValue = false)]
        public List<TaskExecLog> Logs { get; set; }

        /// <summary>
        /// Gets or Sets ExternalOutputPayloadStoragePath
        /// </summary>
        [DataMember(Name = "externalOutputPayloadStoragePath", EmitDefaultValue = false)]
        public string ExternalOutputPayloadStoragePath { get; set; }

        /// <summary>
        /// Gets or Sets SubWorkflowId
        /// </summary>
        [DataMember(Name = "subWorkflowId", EmitDefaultValue = false)]
        public string SubWorkflowId { get; set; }

        /// <summary>
        /// Gets or Sets ExtendLease
        /// </summary>
        [DataMember(Name = "extendLease", EmitDefaultValue = true)]
        public bool ExtendLease { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaskResult {\n");
            sb.Append("  WorkflowInstanceId: ").Append(WorkflowInstanceId).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  ReasonForIncompletion: ").Append(ReasonForIncompletion).Append("\n");
            sb.Append("  CallbackAfterSeconds: ").Append(CallbackAfterSeconds).Append("\n");
            sb.Append("  WorkerId: ").Append(WorkerId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  OutputData: ").Append(OutputData).Append("\n");
            sb.Append("  Logs: ").Append(Logs).Append("\n");
            sb.Append("  ExternalOutputPayloadStoragePath: ").Append(ExternalOutputPayloadStoragePath).Append("\n");
            sb.Append("  SubWorkflowId: ").Append(SubWorkflowId).Append("\n");
            sb.Append("  ExtendLease: ").Append(ExtendLease).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
