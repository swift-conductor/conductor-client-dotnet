/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SwiftConductor.Client.OpenAPIDateConverter;

namespace SwiftConductor.Model
{
    /// <summary>
    /// EventHandler
    /// </summary>
    [DataContract(Name = "EventHandler")]
    public partial class EventHandler : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventHandler" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EventHandler() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventHandler" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="varEvent">varEvent (required).</param>
        /// <param name="condition">condition.</param>
        /// <param name="actions">actions (required).</param>
        /// <param name="active">active.</param>
        /// <param name="evaluatorType">evaluatorType.</param>
        public EventHandler(string name = default(string), string varEvent = default(string), string condition = default(string), List<Action> actions = default(List<Action>), bool active = default(bool), string evaluatorType = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for EventHandler and cannot be null");
            }
            this.Name = name;
            // to ensure "varEvent" is required (not null)
            if (varEvent == null)
            {
                throw new ArgumentNullException("varEvent is a required property for EventHandler and cannot be null");
            }
            this.VarEvent = varEvent;
            // to ensure "actions" is required (not null)
            if (actions == null)
            {
                throw new ArgumentNullException("actions is a required property for EventHandler and cannot be null");
            }
            this.Actions = actions;
            this.Condition = condition;
            this.Active = active;
            this.EvaluatorType = evaluatorType;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets VarEvent
        /// </summary>
        [DataMember(Name = "event", IsRequired = true, EmitDefaultValue = true)]
        public string VarEvent { get; set; }

        /// <summary>
        /// Gets or Sets Condition
        /// </summary>
        [DataMember(Name = "condition", EmitDefaultValue = false)]
        public string Condition { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name = "actions", IsRequired = true, EmitDefaultValue = true)]
        public List<Action> Actions { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets EvaluatorType
        /// </summary>
        [DataMember(Name = "evaluatorType", EmitDefaultValue = false)]
        public string EvaluatorType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventHandler {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarEvent: ").Append(VarEvent).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  EvaluatorType: ").Append(EvaluatorType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
