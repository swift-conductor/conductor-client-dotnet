/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SwiftConductor.Client.OpenAPIDateConverter;

namespace SwiftConductor.Model
{
    /// <summary>
    /// WorkflowDef
    /// </summary>
    [DataContract(Name = "WorkflowDef")]
    public partial class WorkflowDef : IValidatableObject
    {
        /// <summary>
        /// Defines TimeoutPolicy
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TimeoutPolicyEnum
        {
            /// <summary>
            /// Enum TIMEOUTWF for value: TIME_OUT_WF
            /// </summary>
            [EnumMember(Value = "TIME_OUT_WF")]
            TIMEOUTWF = 1,

            /// <summary>
            /// Enum ALERTONLY for value: ALERT_ONLY
            /// </summary>
            [EnumMember(Value = "ALERT_ONLY")]
            ALERTONLY = 2
        }


        /// <summary>
        /// Gets or Sets TimeoutPolicy
        /// </summary>
        [DataMember(Name = "timeoutPolicy", EmitDefaultValue = false)]
        public TimeoutPolicyEnum? TimeoutPolicy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowDef" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkflowDef() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowDef" /> class.
        /// </summary>
        /// <param name="ownerApp">ownerApp.</param>
        /// <param name="createTime">createTime.</param>
        /// <param name="updateTime">updateTime.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="updatedBy">updatedBy.</param>
        /// <param name="accessPolicy">accessPolicy.</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="tasks">tasks (required).</param>
        /// <param name="inputParameters">inputParameters.</param>
        /// <param name="outputParameters">outputParameters.</param>
        /// <param name="failureWorkflow">failureWorkflow.</param>
        /// <param name="schemaVersion">schemaVersion.</param>
        /// <param name="restartable">restartable.</param>
        /// <param name="workflowStatusListenerEnabled">workflowStatusListenerEnabled.</param>
        /// <param name="ownerEmail">ownerEmail.</param>
        /// <param name="timeoutPolicy">timeoutPolicy.</param>
        /// <param name="timeoutSeconds">timeoutSeconds (required).</param>
        /// <param name="variables">variables.</param>
        /// <param name="inputTemplate">inputTemplate.</param>
        public WorkflowDef(string ownerApp = default(string), long createTime = default(long), long updateTime = default(long), string createdBy = default(string), string updatedBy = default(string), Dictionary<string, string> accessPolicy = default(Dictionary<string, string>), string name = default(string), string description = default(string), int varVersion = default(int), List<WorkflowTask> tasks = default(List<WorkflowTask>), List<string> inputParameters = default(List<string>), Dictionary<string, Object> outputParameters = default(Dictionary<string, Object>), string failureWorkflow = default(string), int schemaVersion = default(int), bool restartable = default(bool), bool workflowStatusListenerEnabled = default(bool), string ownerEmail = default(string), TimeoutPolicyEnum? timeoutPolicy = default(TimeoutPolicyEnum?), long timeoutSeconds = default(long), Dictionary<string, Object> variables = default(Dictionary<string, Object>), Dictionary<string, Object> inputTemplate = default(Dictionary<string, Object>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for WorkflowDef and cannot be null");
            }
            this.Name = name;
            // to ensure "tasks" is required (not null)
            if (tasks == null)
            {
                throw new ArgumentNullException("tasks is a required property for WorkflowDef and cannot be null");
            }
            this.Tasks = tasks;
            this.TimeoutSeconds = timeoutSeconds;
            this.OwnerApp = ownerApp;
            this.CreateTime = createTime;
            this.UpdateTime = updateTime;
            this.CreatedBy = createdBy;
            this.UpdatedBy = updatedBy;
            this.AccessPolicy = accessPolicy;
            this.Description = description;
            this.VarVersion = varVersion;
            this.InputParameters = inputParameters;
            this.OutputParameters = outputParameters;
            this.FailureWorkflow = failureWorkflow;
            this.SchemaVersion = schemaVersion;
            this.Restartable = restartable;
            this.WorkflowStatusListenerEnabled = workflowStatusListenerEnabled;
            this.OwnerEmail = ownerEmail;
            this.TimeoutPolicy = timeoutPolicy;
            this.Variables = variables;
            this.InputTemplate = inputTemplate;
        }

        /// <summary>
        /// Gets or Sets OwnerApp
        /// </summary>
        [DataMember(Name = "ownerApp", EmitDefaultValue = false)]
        public string OwnerApp { get; set; }

        /// <summary>
        /// Gets or Sets CreateTime
        /// </summary>
        [DataMember(Name = "createTime", EmitDefaultValue = false)]
        public long CreateTime { get; set; }

        /// <summary>
        /// Gets or Sets UpdateTime
        /// </summary>
        [DataMember(Name = "updateTime", EmitDefaultValue = false)]
        public long UpdateTime { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name = "updatedBy", EmitDefaultValue = false)]
        public string UpdatedBy { get; set; }

        /// <summary>
        /// Gets or Sets AccessPolicy
        /// </summary>
        [DataMember(Name = "accessPolicy", EmitDefaultValue = false)]
        public Dictionary<string, string> AccessPolicy { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets Tasks
        /// </summary>
        [DataMember(Name = "tasks", IsRequired = true, EmitDefaultValue = true)]
        public List<WorkflowTask> Tasks { get; set; }

        /// <summary>
        /// Gets or Sets InputParameters
        /// </summary>
        [DataMember(Name = "inputParameters", EmitDefaultValue = false)]
        public List<string> InputParameters { get; set; }

        /// <summary>
        /// Gets or Sets OutputParameters
        /// </summary>
        [DataMember(Name = "outputParameters", EmitDefaultValue = false)]
        public Dictionary<string, Object> OutputParameters { get; set; }

        /// <summary>
        /// Gets or Sets FailureWorkflow
        /// </summary>
        [DataMember(Name = "failureWorkflow", EmitDefaultValue = false)]
        public string FailureWorkflow { get; set; }

        /// <summary>
        /// Gets or Sets SchemaVersion
        /// </summary>
        [DataMember(Name = "schemaVersion", EmitDefaultValue = false)]
        public int SchemaVersion { get; set; }

        /// <summary>
        /// Gets or Sets Restartable
        /// </summary>
        [DataMember(Name = "restartable", EmitDefaultValue = true)]
        public bool Restartable { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowStatusListenerEnabled
        /// </summary>
        [DataMember(Name = "workflowStatusListenerEnabled", EmitDefaultValue = true)]
        public bool WorkflowStatusListenerEnabled { get; set; }

        /// <summary>
        /// Gets or Sets OwnerEmail
        /// </summary>
        [DataMember(Name = "ownerEmail", EmitDefaultValue = false)]
        public string OwnerEmail { get; set; }

        /// <summary>
        /// Gets or Sets TimeoutSeconds
        /// </summary>
        [DataMember(Name = "timeoutSeconds", IsRequired = true, EmitDefaultValue = true)]
        public long TimeoutSeconds { get; set; }

        /// <summary>
        /// Gets or Sets Variables
        /// </summary>
        [DataMember(Name = "variables", EmitDefaultValue = false)]
        public Dictionary<string, Object> Variables { get; set; }

        /// <summary>
        /// Gets or Sets InputTemplate
        /// </summary>
        [DataMember(Name = "inputTemplate", EmitDefaultValue = false)]
        public Dictionary<string, Object> InputTemplate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowDef {\n");
            sb.Append("  OwnerApp: ").Append(OwnerApp).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  AccessPolicy: ").Append(AccessPolicy).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Tasks: ").Append(Tasks).Append("\n");
            sb.Append("  InputParameters: ").Append(InputParameters).Append("\n");
            sb.Append("  OutputParameters: ").Append(OutputParameters).Append("\n");
            sb.Append("  FailureWorkflow: ").Append(FailureWorkflow).Append("\n");
            sb.Append("  SchemaVersion: ").Append(SchemaVersion).Append("\n");
            sb.Append("  Restartable: ").Append(Restartable).Append("\n");
            sb.Append("  WorkflowStatusListenerEnabled: ").Append(WorkflowStatusListenerEnabled).Append("\n");
            sb.Append("  OwnerEmail: ").Append(OwnerEmail).Append("\n");
            sb.Append("  TimeoutPolicy: ").Append(TimeoutPolicy).Append("\n");
            sb.Append("  TimeoutSeconds: ").Append(TimeoutSeconds).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("  InputTemplate: ").Append(InputTemplate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SchemaVersion (int) maximum
            if (this.SchemaVersion > (int)2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SchemaVersion, must be a value less than or equal to 2.", new [] { "SchemaVersion" });
            }

            // SchemaVersion (int) minimum
            if (this.SchemaVersion < (int)2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SchemaVersion, must be a value greater than or equal to 2.", new [] { "SchemaVersion" });
            }

            yield break;
        }
    }

}
