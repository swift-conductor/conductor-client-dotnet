/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SwiftConductor.Client;
using SwiftConductor.Model;

namespace SwiftConductor.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkflowResourceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Starts the decision task for a workflow
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Decide(string workflowId, int operationIndex = 0);

        /// <summary>
        /// Starts the decision task for a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DecideWithHttpInfo(string workflowId, int operationIndex = 0);
        /// <summary>
        /// Removes the workflow from the system
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="archiveWorkflow"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Delete(string workflowId, bool? archiveWorkflow = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Removes the workflow from the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="archiveWorkflow"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo(string workflowId, bool? archiveWorkflow = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Gets the workflow by workflow id
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="includeTasks"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Workflow</returns>
        Workflow GetExecutionStatus(string workflowId, bool? includeTasks = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Gets the workflow by workflow id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="includeTasks"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Workflow</returns>
        ApiResponse<Workflow> GetExecutionStatusWithHttpInfo(string workflowId, bool? includeTasks = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get the uri and path of the external storage where the workflow payload is to be stored
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExternalStorageLocation</returns>
        ExternalStorageLocation GetExternalStorageLocation(string path, string operation, string payloadType, int operationIndex = 0);

        /// <summary>
        /// Get the uri and path of the external storage where the workflow payload is to be stored
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExternalStorageLocation</returns>
        ApiResponse<ExternalStorageLocation> GetExternalStorageLocationWithHttpInfo(string path, string operation, string payloadType, int operationIndex = 0);
        /// <summary>
        /// Get the uri and path of the external storage where the workflow payload is to be stored
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExternalStorageLocation</returns>
        ExternalStorageLocation GetExternalStorageLocation1(string path, string operation, string payloadType, int operationIndex = 0);

        /// <summary>
        /// Get the uri and path of the external storage where the workflow payload is to be stored
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExternalStorageLocation</returns>
        ApiResponse<ExternalStorageLocation> GetExternalStorageLocation1WithHttpInfo(string path, string operation, string payloadType, int operationIndex = 0);
        /// <summary>
        /// Retrieve all the running workflows
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"> (optional, default to 1)</param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetRunningWorkflow(string name, int? varVersion = default(int?), long? startTime = default(long?), long? endTime = default(long?), int operationIndex = 0);

        /// <summary>
        /// Retrieve all the running workflows
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"> (optional, default to 1)</param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetRunningWorkflowWithHttpInfo(string name, int? varVersion = default(int?), long? startTime = default(long?), long? endTime = default(long?), int operationIndex = 0);
        /// <summary>
        /// Lists workflows for the given correlation id list
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="requestBody"></param>
        /// <param name="includeClosed"> (optional, default to false)</param>
        /// <param name="includeTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, List&lt;Workflow&gt;&gt;</returns>
        Dictionary<string, List<Workflow>> GetWorkflows(string name, List<string> requestBody, bool? includeClosed = default(bool?), bool? includeTasks = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Lists workflows for the given correlation id list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="requestBody"></param>
        /// <param name="includeClosed"> (optional, default to false)</param>
        /// <param name="includeTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, List&lt;Workflow&gt;&gt;</returns>
        ApiResponse<Dictionary<string, List<Workflow>>> GetWorkflowsWithHttpInfo(string name, List<string> requestBody, bool? includeClosed = default(bool?), bool? includeTasks = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Lists workflows for the given correlation id
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="correlationId"></param>
        /// <param name="includeClosed"> (optional, default to false)</param>
        /// <param name="includeTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Workflow&gt;</returns>
        List<Workflow> GetWorkflows1(string name, string correlationId, bool? includeClosed = default(bool?), bool? includeTasks = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Lists workflows for the given correlation id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="correlationId"></param>
        /// <param name="includeClosed"> (optional, default to false)</param>
        /// <param name="includeTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Workflow&gt;</returns>
        ApiResponse<List<Workflow>> GetWorkflows1WithHttpInfo(string name, string correlationId, bool? includeClosed = default(bool?), bool? includeTasks = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Pauses the workflow
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PauseWorkflow(string workflowId, int operationIndex = 0);

        /// <summary>
        /// Pauses the workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PauseWorkflowWithHttpInfo(string workflowId, int operationIndex = 0);
        /// <summary>
        /// Reruns the workflow from a specific task
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="rerunWorkflowRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string Rerun(string workflowId, RerunWorkflowRequest rerunWorkflowRequest, int operationIndex = 0);

        /// <summary>
        /// Reruns the workflow from a specific task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="rerunWorkflowRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> RerunWithHttpInfo(string workflowId, RerunWorkflowRequest rerunWorkflowRequest, int operationIndex = 0);
        /// <summary>
        /// Resets callback times of all non-terminal CUSTOM tasks to 0
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ResetWorkflow(string workflowId, int operationIndex = 0);

        /// <summary>
        /// Resets callback times of all non-terminal CUSTOM tasks to 0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResetWorkflowWithHttpInfo(string workflowId, int operationIndex = 0);
        /// <summary>
        /// Restarts a completed workflow
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="useLatestDefinitions"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Restart(string workflowId, bool? useLatestDefinitions = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Restarts a completed workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="useLatestDefinitions"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RestartWithHttpInfo(string workflowId, bool? useLatestDefinitions = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Resumes the workflow
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ResumeWorkflow(string workflowId, int operationIndex = 0);

        /// <summary>
        /// Resumes the workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResumeWorkflowWithHttpInfo(string workflowId, int operationIndex = 0);
        /// <summary>
        /// Retries the last failed task
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="resumeSubworkflowTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Retry(string workflowId, bool? resumeSubworkflowTasks = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retries the last failed task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="resumeSubworkflowTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RetryWithHttpInfo(string workflowId, bool? resumeSubworkflowTasks = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Search for workflows based on payload and other parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResultWorkflowSummary</returns>
        SearchResultWorkflowSummary Search(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0);

        /// <summary>
        /// Search for workflows based on payload and other parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResultWorkflowSummary</returns>
        ApiResponse<SearchResultWorkflowSummary> SearchWithHttpInfo(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0);
        /// <summary>
        /// Search for workflows based on payload and other parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResultWorkflow</returns>
        SearchResultWorkflow SearchV2(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0);

        /// <summary>
        /// Search for workflows based on payload and other parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResultWorkflow</returns>
        ApiResponse<SearchResultWorkflow> SearchV2WithHttpInfo(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0);
        /// <summary>
        /// Search for workflows based on task parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResultWorkflowSummary</returns>
        SearchResultWorkflowSummary SearchWorkflowsByTasks(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0);

        /// <summary>
        /// Search for workflows based on task parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResultWorkflowSummary</returns>
        ApiResponse<SearchResultWorkflowSummary> SearchWorkflowsByTasksWithHttpInfo(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0);
        /// <summary>
        /// Search for workflows based on task parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResultWorkflow</returns>
        SearchResultWorkflow SearchWorkflowsByTasksV2(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0);

        /// <summary>
        /// Search for workflows based on task parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResultWorkflow</returns>
        ApiResponse<SearchResultWorkflow> SearchWorkflowsByTasksV2WithHttpInfo(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0);
        /// <summary>
        /// Skips a given task from a current running workflow
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskReferenceName"></param>
        /// <param name="skipTaskRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SkipTaskFromWorkflow(string workflowId, string taskReferenceName, SkipTaskRequest skipTaskRequest, int operationIndex = 0);

        /// <summary>
        /// Skips a given task from a current running workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskReferenceName"></param>
        /// <param name="skipTaskRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SkipTaskFromWorkflowWithHttpInfo(string workflowId, string taskReferenceName, SkipTaskRequest skipTaskRequest, int operationIndex = 0);
        /// <summary>
        /// Start a new workflow with StartWorkflowRequest, which allows task to be executed in a domain
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startWorkflowRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string StartWorkflow(StartWorkflowRequest startWorkflowRequest, int operationIndex = 0);

        /// <summary>
        /// Start a new workflow with StartWorkflowRequest, which allows task to be executed in a domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startWorkflowRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> StartWorkflowWithHttpInfo(StartWorkflowRequest startWorkflowRequest, int operationIndex = 0);
        /// <summary>
        /// Start a new workflow. Returns the ID of the workflow instance that can be later used for tracking
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="requestBody"></param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="correlationId"> (optional)</param>
        /// <param name="priority"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string StartWorkflow1(string name, Dictionary<string, Object> requestBody, int? varVersion = default(int?), string? correlationId = default(string?), int? priority = default(int?), int operationIndex = 0);

        /// <summary>
        /// Start a new workflow. Returns the ID of the workflow instance that can be later used for tracking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="requestBody"></param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="correlationId"> (optional)</param>
        /// <param name="priority"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> StartWorkflow1WithHttpInfo(string name, Dictionary<string, Object> requestBody, int? varVersion = default(int?), string? correlationId = default(string?), int? priority = default(int?), int operationIndex = 0);
        /// <summary>
        /// Terminate workflow execution
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="reason"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Terminate1(string workflowId, string? reason = default(string?), int operationIndex = 0);

        /// <summary>
        /// Terminate workflow execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="reason"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Terminate1WithHttpInfo(string workflowId, string? reason = default(string?), int operationIndex = 0);
        /// <summary>
        /// Test workflow execution using mock data
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Workflow</returns>
        Workflow TestWorkflow(WorkflowTestRequest workflowTestRequest, int operationIndex = 0);

        /// <summary>
        /// Test workflow execution using mock data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Workflow</returns>
        ApiResponse<Workflow> TestWorkflowWithHttpInfo(WorkflowTestRequest workflowTestRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkflowResourceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Starts the decision task for a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DecideAsync(string workflowId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Starts the decision task for a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DecideWithHttpInfoAsync(string workflowId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Removes the workflow from the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="archiveWorkflow"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync(string workflowId, bool? archiveWorkflow = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes the workflow from the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="archiveWorkflow"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync(string workflowId, bool? archiveWorkflow = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the workflow by workflow id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="includeTasks"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Workflow</returns>
        System.Threading.Tasks.Task<Workflow> GetExecutionStatusAsync(string workflowId, bool? includeTasks = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the workflow by workflow id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="includeTasks"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Workflow)</returns>
        System.Threading.Tasks.Task<ApiResponse<Workflow>> GetExecutionStatusWithHttpInfoAsync(string workflowId, bool? includeTasks = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the uri and path of the external storage where the workflow payload is to be stored
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExternalStorageLocation</returns>
        System.Threading.Tasks.Task<ExternalStorageLocation> GetExternalStorageLocationAsync(string path, string operation, string payloadType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the uri and path of the external storage where the workflow payload is to be stored
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExternalStorageLocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalStorageLocation>> GetExternalStorageLocationWithHttpInfoAsync(string path, string operation, string payloadType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the uri and path of the external storage where the workflow payload is to be stored
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExternalStorageLocation</returns>
        System.Threading.Tasks.Task<ExternalStorageLocation> GetExternalStorageLocation1Async(string path, string operation, string payloadType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the uri and path of the external storage where the workflow payload is to be stored
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExternalStorageLocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalStorageLocation>> GetExternalStorageLocation1WithHttpInfoAsync(string path, string operation, string payloadType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all the running workflows
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"> (optional, default to 1)</param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetRunningWorkflowAsync(string name, int? varVersion = default(int?), long? startTime = default(long?), long? endTime = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all the running workflows
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"> (optional, default to 1)</param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetRunningWorkflowWithHttpInfoAsync(string name, int? varVersion = default(int?), long? startTime = default(long?), long? endTime = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lists workflows for the given correlation id list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="requestBody"></param>
        /// <param name="includeClosed"> (optional, default to false)</param>
        /// <param name="includeTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, List&lt;Workflow&gt;&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, List<Workflow>>> GetWorkflowsAsync(string name, List<string> requestBody, bool? includeClosed = default(bool?), bool? includeTasks = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lists workflows for the given correlation id list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="requestBody"></param>
        /// <param name="includeClosed"> (optional, default to false)</param>
        /// <param name="includeTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, List&lt;Workflow&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, List<Workflow>>>> GetWorkflowsWithHttpInfoAsync(string name, List<string> requestBody, bool? includeClosed = default(bool?), bool? includeTasks = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lists workflows for the given correlation id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="correlationId"></param>
        /// <param name="includeClosed"> (optional, default to false)</param>
        /// <param name="includeTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Workflow&gt;</returns>
        System.Threading.Tasks.Task<List<Workflow>> GetWorkflows1Async(string name, string correlationId, bool? includeClosed = default(bool?), bool? includeTasks = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lists workflows for the given correlation id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="correlationId"></param>
        /// <param name="includeClosed"> (optional, default to false)</param>
        /// <param name="includeTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Workflow&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Workflow>>> GetWorkflows1WithHttpInfoAsync(string name, string correlationId, bool? includeClosed = default(bool?), bool? includeTasks = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pauses the workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PauseWorkflowAsync(string workflowId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pauses the workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PauseWorkflowWithHttpInfoAsync(string workflowId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reruns the workflow from a specific task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="rerunWorkflowRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> RerunAsync(string workflowId, RerunWorkflowRequest rerunWorkflowRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reruns the workflow from a specific task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="rerunWorkflowRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> RerunWithHttpInfoAsync(string workflowId, RerunWorkflowRequest rerunWorkflowRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resets callback times of all non-terminal CUSTOM tasks to 0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResetWorkflowAsync(string workflowId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Resets callback times of all non-terminal CUSTOM tasks to 0
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResetWorkflowWithHttpInfoAsync(string workflowId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Restarts a completed workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="useLatestDefinitions"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RestartAsync(string workflowId, bool? useLatestDefinitions = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Restarts a completed workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="useLatestDefinitions"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RestartWithHttpInfoAsync(string workflowId, bool? useLatestDefinitions = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resumes the workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResumeWorkflowAsync(string workflowId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Resumes the workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResumeWorkflowWithHttpInfoAsync(string workflowId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retries the last failed task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="resumeSubworkflowTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RetryAsync(string workflowId, bool? resumeSubworkflowTasks = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retries the last failed task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="resumeSubworkflowTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RetryWithHttpInfoAsync(string workflowId, bool? resumeSubworkflowTasks = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for workflows based on payload and other parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResultWorkflowSummary</returns>
        System.Threading.Tasks.Task<SearchResultWorkflowSummary> SearchAsync(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for workflows based on payload and other parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResultWorkflowSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResultWorkflowSummary>> SearchWithHttpInfoAsync(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for workflows based on payload and other parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResultWorkflow</returns>
        System.Threading.Tasks.Task<SearchResultWorkflow> SearchV2Async(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for workflows based on payload and other parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResultWorkflow)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResultWorkflow>> SearchV2WithHttpInfoAsync(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for workflows based on task parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResultWorkflowSummary</returns>
        System.Threading.Tasks.Task<SearchResultWorkflowSummary> SearchWorkflowsByTasksAsync(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for workflows based on task parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResultWorkflowSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResultWorkflowSummary>> SearchWorkflowsByTasksWithHttpInfoAsync(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for workflows based on task parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResultWorkflow</returns>
        System.Threading.Tasks.Task<SearchResultWorkflow> SearchWorkflowsByTasksV2Async(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for workflows based on task parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResultWorkflow)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResultWorkflow>> SearchWorkflowsByTasksV2WithHttpInfoAsync(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Skips a given task from a current running workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskReferenceName"></param>
        /// <param name="skipTaskRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SkipTaskFromWorkflowAsync(string workflowId, string taskReferenceName, SkipTaskRequest skipTaskRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Skips a given task from a current running workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskReferenceName"></param>
        /// <param name="skipTaskRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SkipTaskFromWorkflowWithHttpInfoAsync(string workflowId, string taskReferenceName, SkipTaskRequest skipTaskRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start a new workflow with StartWorkflowRequest, which allows task to be executed in a domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startWorkflowRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> StartWorkflowAsync(StartWorkflowRequest startWorkflowRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start a new workflow with StartWorkflowRequest, which allows task to be executed in a domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startWorkflowRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> StartWorkflowWithHttpInfoAsync(StartWorkflowRequest startWorkflowRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start a new workflow. Returns the ID of the workflow instance that can be later used for tracking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="requestBody"></param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="correlationId"> (optional)</param>
        /// <param name="priority"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> StartWorkflow1Async(string name, Dictionary<string, Object> requestBody, int? varVersion = default(int?), string? correlationId = default(string?), int? priority = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start a new workflow. Returns the ID of the workflow instance that can be later used for tracking
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="requestBody"></param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="correlationId"> (optional)</param>
        /// <param name="priority"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> StartWorkflow1WithHttpInfoAsync(string name, Dictionary<string, Object> requestBody, int? varVersion = default(int?), string? correlationId = default(string?), int? priority = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Terminate workflow execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="reason"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Terminate1Async(string workflowId, string? reason = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Terminate workflow execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="reason"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Terminate1WithHttpInfoAsync(string workflowId, string? reason = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Test workflow execution using mock data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Workflow</returns>
        System.Threading.Tasks.Task<Workflow> TestWorkflowAsync(WorkflowTestRequest workflowTestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Test workflow execution using mock data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Workflow)</returns>
        System.Threading.Tasks.Task<ApiResponse<Workflow>> TestWorkflowWithHttpInfoAsync(WorkflowTestRequest workflowTestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkflowResourceApi : IWorkflowResourceApiSync, IWorkflowResourceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkflowResourceApi : IWorkflowResourceApi
    {
        private SwiftConductor.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowResourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkflowResourceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowResourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkflowResourceApi(string basePath)
        {
            this.Configuration = SwiftConductor.Client.Configuration.MergeConfigurations(
                SwiftConductor.Client.GlobalConfiguration.Instance,
                new SwiftConductor.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SwiftConductor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SwiftConductor.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SwiftConductor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowResourceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkflowResourceApi(SwiftConductor.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SwiftConductor.Client.Configuration.MergeConfigurations(
                SwiftConductor.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SwiftConductor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SwiftConductor.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SwiftConductor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowResourceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WorkflowResourceApi(SwiftConductor.Client.ISynchronousClient client, SwiftConductor.Client.IAsynchronousClient asyncClient, SwiftConductor.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SwiftConductor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SwiftConductor.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SwiftConductor.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SwiftConductor.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SwiftConductor.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Starts the decision task for a workflow 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Decide(string workflowId, int operationIndex = 0)
        {
            DecideWithHttpInfo(workflowId);
        }

        /// <summary>
        /// Starts the decision task for a workflow 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SwiftConductor.Client.ApiResponse<Object> DecideWithHttpInfo(string workflowId, int operationIndex = 0)
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->Decide");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter

            localVarRequestOptions.Operation = "WorkflowResourceApi.Decide";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/workflow/decide/{workflowId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Decide", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Starts the decision task for a workflow 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DecideAsync(string workflowId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DecideWithHttpInfoAsync(workflowId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Starts the decision task for a workflow 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Object>> DecideWithHttpInfoAsync(string workflowId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->Decide");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter

            localVarRequestOptions.Operation = "WorkflowResourceApi.Decide";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/workflow/decide/{workflowId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Decide", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes the workflow from the system 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="archiveWorkflow"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Delete(string workflowId, bool? archiveWorkflow = default(bool?), int operationIndex = 0)
        {
            DeleteWithHttpInfo(workflowId, archiveWorkflow);
        }

        /// <summary>
        /// Removes the workflow from the system 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="archiveWorkflow"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SwiftConductor.Client.ApiResponse<Object> DeleteWithHttpInfo(string workflowId, bool? archiveWorkflow = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->Delete");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter
            if (archiveWorkflow != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "archiveWorkflow", archiveWorkflow));
            }

            localVarRequestOptions.Operation = "WorkflowResourceApi.Delete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/workflow/{workflowId}/remove", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes the workflow from the system 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="archiveWorkflow"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync(string workflowId, bool? archiveWorkflow = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWithHttpInfoAsync(workflowId, archiveWorkflow, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Removes the workflow from the system 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="archiveWorkflow"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Object>> DeleteWithHttpInfoAsync(string workflowId, bool? archiveWorkflow = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->Delete");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter
            if (archiveWorkflow != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "archiveWorkflow", archiveWorkflow));
            }

            localVarRequestOptions.Operation = "WorkflowResourceApi.Delete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/workflow/{workflowId}/remove", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the workflow by workflow id 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="includeTasks"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Workflow</returns>
        public Workflow GetExecutionStatus(string workflowId, bool? includeTasks = default(bool?), int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<Workflow> localVarResponse = GetExecutionStatusWithHttpInfo(workflowId, includeTasks);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the workflow by workflow id 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="includeTasks"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Workflow</returns>
        public SwiftConductor.Client.ApiResponse<Workflow> GetExecutionStatusWithHttpInfo(string workflowId, bool? includeTasks = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->GetExecutionStatus");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter
            if (includeTasks != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "includeTasks", includeTasks));
            }

            localVarRequestOptions.Operation = "WorkflowResourceApi.GetExecutionStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Workflow>("/api/workflow/{workflowId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExecutionStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the workflow by workflow id 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="includeTasks"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Workflow</returns>
        public async System.Threading.Tasks.Task<Workflow> GetExecutionStatusAsync(string workflowId, bool? includeTasks = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<Workflow> localVarResponse = await GetExecutionStatusWithHttpInfoAsync(workflowId, includeTasks, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the workflow by workflow id 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="includeTasks"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Workflow)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Workflow>> GetExecutionStatusWithHttpInfoAsync(string workflowId, bool? includeTasks = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->GetExecutionStatus");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter
            if (includeTasks != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "includeTasks", includeTasks));
            }

            localVarRequestOptions.Operation = "WorkflowResourceApi.GetExecutionStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Workflow>("/api/workflow/{workflowId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExecutionStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the uri and path of the external storage where the workflow payload is to be stored 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExternalStorageLocation</returns>
        public ExternalStorageLocation GetExternalStorageLocation(string path, string operation, string payloadType, int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<ExternalStorageLocation> localVarResponse = GetExternalStorageLocationWithHttpInfo(path, operation, payloadType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the uri and path of the external storage where the workflow payload is to be stored 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExternalStorageLocation</returns>
        public SwiftConductor.Client.ApiResponse<ExternalStorageLocation> GetExternalStorageLocationWithHttpInfo(string path, string operation, string payloadType, int operationIndex = 0)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'path' when calling WorkflowResourceApi->GetExternalStorageLocation");
            }

            // verify the required parameter 'operation' is set
            if (operation == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'operation' when calling WorkflowResourceApi->GetExternalStorageLocation");
            }

            // verify the required parameter 'payloadType' is set
            if (payloadType == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'payloadType' when calling WorkflowResourceApi->GetExternalStorageLocation");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "operation", operation));
            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "payloadType", payloadType));

            localVarRequestOptions.Operation = "WorkflowResourceApi.GetExternalStorageLocation";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ExternalStorageLocation>("/api/workflow/external-storage-location", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExternalStorageLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the uri and path of the external storage where the workflow payload is to be stored 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExternalStorageLocation</returns>
        public async System.Threading.Tasks.Task<ExternalStorageLocation> GetExternalStorageLocationAsync(string path, string operation, string payloadType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<ExternalStorageLocation> localVarResponse = await GetExternalStorageLocationWithHttpInfoAsync(path, operation, payloadType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the uri and path of the external storage where the workflow payload is to be stored 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExternalStorageLocation)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<ExternalStorageLocation>> GetExternalStorageLocationWithHttpInfoAsync(string path, string operation, string payloadType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'path' when calling WorkflowResourceApi->GetExternalStorageLocation");
            }

            // verify the required parameter 'operation' is set
            if (operation == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'operation' when calling WorkflowResourceApi->GetExternalStorageLocation");
            }

            // verify the required parameter 'payloadType' is set
            if (payloadType == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'payloadType' when calling WorkflowResourceApi->GetExternalStorageLocation");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "operation", operation));
            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "payloadType", payloadType));

            localVarRequestOptions.Operation = "WorkflowResourceApi.GetExternalStorageLocation";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExternalStorageLocation>("/api/workflow/external-storage-location", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExternalStorageLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the uri and path of the external storage where the workflow payload is to be stored 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExternalStorageLocation</returns>
        public ExternalStorageLocation GetExternalStorageLocation1(string path, string operation, string payloadType, int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<ExternalStorageLocation> localVarResponse = GetExternalStorageLocation1WithHttpInfo(path, operation, payloadType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the uri and path of the external storage where the workflow payload is to be stored 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExternalStorageLocation</returns>
        public SwiftConductor.Client.ApiResponse<ExternalStorageLocation> GetExternalStorageLocation1WithHttpInfo(string path, string operation, string payloadType, int operationIndex = 0)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'path' when calling WorkflowResourceApi->GetExternalStorageLocation1");
            }

            // verify the required parameter 'operation' is set
            if (operation == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'operation' when calling WorkflowResourceApi->GetExternalStorageLocation1");
            }

            // verify the required parameter 'payloadType' is set
            if (payloadType == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'payloadType' when calling WorkflowResourceApi->GetExternalStorageLocation1");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "operation", operation));
            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "payloadType", payloadType));

            localVarRequestOptions.Operation = "WorkflowResourceApi.GetExternalStorageLocation1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ExternalStorageLocation>("/api/workflow/externalstoragelocation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExternalStorageLocation1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the uri and path of the external storage where the workflow payload is to be stored 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExternalStorageLocation</returns>
        public async System.Threading.Tasks.Task<ExternalStorageLocation> GetExternalStorageLocation1Async(string path, string operation, string payloadType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<ExternalStorageLocation> localVarResponse = await GetExternalStorageLocation1WithHttpInfoAsync(path, operation, payloadType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the uri and path of the external storage where the workflow payload is to be stored 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExternalStorageLocation)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<ExternalStorageLocation>> GetExternalStorageLocation1WithHttpInfoAsync(string path, string operation, string payloadType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'path' when calling WorkflowResourceApi->GetExternalStorageLocation1");
            }

            // verify the required parameter 'operation' is set
            if (operation == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'operation' when calling WorkflowResourceApi->GetExternalStorageLocation1");
            }

            // verify the required parameter 'payloadType' is set
            if (payloadType == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'payloadType' when calling WorkflowResourceApi->GetExternalStorageLocation1");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "operation", operation));
            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "payloadType", payloadType));

            localVarRequestOptions.Operation = "WorkflowResourceApi.GetExternalStorageLocation1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExternalStorageLocation>("/api/workflow/externalstoragelocation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExternalStorageLocation1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all the running workflows 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"> (optional, default to 1)</param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetRunningWorkflow(string name, int? varVersion = default(int?), long? startTime = default(long?), long? endTime = default(long?), int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<List<string>> localVarResponse = GetRunningWorkflowWithHttpInfo(name, varVersion, startTime, endTime);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all the running workflows 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"> (optional, default to 1)</param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public SwiftConductor.Client.ApiResponse<List<string>> GetRunningWorkflowWithHttpInfo(string name, int? varVersion = default(int?), long? startTime = default(long?), long? endTime = default(long?), int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowResourceApi->GetRunningWorkflow");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", SwiftConductor.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (varVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "version", varVersion));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }

            localVarRequestOptions.Operation = "WorkflowResourceApi.GetRunningWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/api/workflow/running/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunningWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all the running workflows 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"> (optional, default to 1)</param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetRunningWorkflowAsync(string name, int? varVersion = default(int?), long? startTime = default(long?), long? endTime = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<List<string>> localVarResponse = await GetRunningWorkflowWithHttpInfoAsync(name, varVersion, startTime, endTime, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all the running workflows 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"> (optional, default to 1)</param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<List<string>>> GetRunningWorkflowWithHttpInfoAsync(string name, int? varVersion = default(int?), long? startTime = default(long?), long? endTime = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowResourceApi->GetRunningWorkflow");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", SwiftConductor.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (varVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "version", varVersion));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }

            localVarRequestOptions.Operation = "WorkflowResourceApi.GetRunningWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/api/workflow/running/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunningWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists workflows for the given correlation id list 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="requestBody"></param>
        /// <param name="includeClosed"> (optional, default to false)</param>
        /// <param name="includeTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, List&lt;Workflow&gt;&gt;</returns>
        public Dictionary<string, List<Workflow>> GetWorkflows(string name, List<string> requestBody, bool? includeClosed = default(bool?), bool? includeTasks = default(bool?), int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<Dictionary<string, List<Workflow>>> localVarResponse = GetWorkflowsWithHttpInfo(name, requestBody, includeClosed, includeTasks);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists workflows for the given correlation id list 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="requestBody"></param>
        /// <param name="includeClosed"> (optional, default to false)</param>
        /// <param name="includeTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, List&lt;Workflow&gt;&gt;</returns>
        public SwiftConductor.Client.ApiResponse<Dictionary<string, List<Workflow>>> GetWorkflowsWithHttpInfo(string name, List<string> requestBody, bool? includeClosed = default(bool?), bool? includeTasks = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowResourceApi->GetWorkflows");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'requestBody' when calling WorkflowResourceApi->GetWorkflows");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", SwiftConductor.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (includeClosed != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "includeClosed", includeClosed));
            }
            if (includeTasks != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "includeTasks", includeTasks));
            }
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "WorkflowResourceApi.GetWorkflows";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, List<Workflow>>>("/api/workflow/{name}/correlated", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkflows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists workflows for the given correlation id list 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="requestBody"></param>
        /// <param name="includeClosed"> (optional, default to false)</param>
        /// <param name="includeTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, List&lt;Workflow&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, List<Workflow>>> GetWorkflowsAsync(string name, List<string> requestBody, bool? includeClosed = default(bool?), bool? includeTasks = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<Dictionary<string, List<Workflow>>> localVarResponse = await GetWorkflowsWithHttpInfoAsync(name, requestBody, includeClosed, includeTasks, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists workflows for the given correlation id list 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="requestBody"></param>
        /// <param name="includeClosed"> (optional, default to false)</param>
        /// <param name="includeTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, List&lt;Workflow&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Dictionary<string, List<Workflow>>>> GetWorkflowsWithHttpInfoAsync(string name, List<string> requestBody, bool? includeClosed = default(bool?), bool? includeTasks = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowResourceApi->GetWorkflows");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'requestBody' when calling WorkflowResourceApi->GetWorkflows");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", SwiftConductor.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (includeClosed != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "includeClosed", includeClosed));
            }
            if (includeTasks != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "includeTasks", includeTasks));
            }
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "WorkflowResourceApi.GetWorkflows";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, List<Workflow>>>("/api/workflow/{name}/correlated", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkflows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists workflows for the given correlation id 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="correlationId"></param>
        /// <param name="includeClosed"> (optional, default to false)</param>
        /// <param name="includeTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Workflow&gt;</returns>
        public List<Workflow> GetWorkflows1(string name, string correlationId, bool? includeClosed = default(bool?), bool? includeTasks = default(bool?), int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<List<Workflow>> localVarResponse = GetWorkflows1WithHttpInfo(name, correlationId, includeClosed, includeTasks);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists workflows for the given correlation id 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="correlationId"></param>
        /// <param name="includeClosed"> (optional, default to false)</param>
        /// <param name="includeTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Workflow&gt;</returns>
        public SwiftConductor.Client.ApiResponse<List<Workflow>> GetWorkflows1WithHttpInfo(string name, string correlationId, bool? includeClosed = default(bool?), bool? includeTasks = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowResourceApi->GetWorkflows1");
            }

            // verify the required parameter 'correlationId' is set
            if (correlationId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'correlationId' when calling WorkflowResourceApi->GetWorkflows1");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", SwiftConductor.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("correlationId", SwiftConductor.Client.ClientUtils.ParameterToString(correlationId)); // path parameter
            if (includeClosed != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "includeClosed", includeClosed));
            }
            if (includeTasks != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "includeTasks", includeTasks));
            }

            localVarRequestOptions.Operation = "WorkflowResourceApi.GetWorkflows1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Workflow>>("/api/workflow/{name}/correlated/{correlationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkflows1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists workflows for the given correlation id 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="correlationId"></param>
        /// <param name="includeClosed"> (optional, default to false)</param>
        /// <param name="includeTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Workflow&gt;</returns>
        public async System.Threading.Tasks.Task<List<Workflow>> GetWorkflows1Async(string name, string correlationId, bool? includeClosed = default(bool?), bool? includeTasks = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<List<Workflow>> localVarResponse = await GetWorkflows1WithHttpInfoAsync(name, correlationId, includeClosed, includeTasks, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists workflows for the given correlation id 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="correlationId"></param>
        /// <param name="includeClosed"> (optional, default to false)</param>
        /// <param name="includeTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Workflow&gt;)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<List<Workflow>>> GetWorkflows1WithHttpInfoAsync(string name, string correlationId, bool? includeClosed = default(bool?), bool? includeTasks = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowResourceApi->GetWorkflows1");
            }

            // verify the required parameter 'correlationId' is set
            if (correlationId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'correlationId' when calling WorkflowResourceApi->GetWorkflows1");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", SwiftConductor.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("correlationId", SwiftConductor.Client.ClientUtils.ParameterToString(correlationId)); // path parameter
            if (includeClosed != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "includeClosed", includeClosed));
            }
            if (includeTasks != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "includeTasks", includeTasks));
            }

            localVarRequestOptions.Operation = "WorkflowResourceApi.GetWorkflows1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Workflow>>("/api/workflow/{name}/correlated/{correlationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkflows1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pauses the workflow 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PauseWorkflow(string workflowId, int operationIndex = 0)
        {
            PauseWorkflowWithHttpInfo(workflowId);
        }

        /// <summary>
        /// Pauses the workflow 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SwiftConductor.Client.ApiResponse<Object> PauseWorkflowWithHttpInfo(string workflowId, int operationIndex = 0)
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->PauseWorkflow");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter

            localVarRequestOptions.Operation = "WorkflowResourceApi.PauseWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/workflow/{workflowId}/pause", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PauseWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pauses the workflow 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PauseWorkflowAsync(string workflowId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PauseWorkflowWithHttpInfoAsync(workflowId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Pauses the workflow 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Object>> PauseWorkflowWithHttpInfoAsync(string workflowId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->PauseWorkflow");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter

            localVarRequestOptions.Operation = "WorkflowResourceApi.PauseWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/workflow/{workflowId}/pause", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PauseWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reruns the workflow from a specific task 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="rerunWorkflowRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string Rerun(string workflowId, RerunWorkflowRequest rerunWorkflowRequest, int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<string> localVarResponse = RerunWithHttpInfo(workflowId, rerunWorkflowRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reruns the workflow from a specific task 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="rerunWorkflowRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public SwiftConductor.Client.ApiResponse<string> RerunWithHttpInfo(string workflowId, RerunWorkflowRequest rerunWorkflowRequest, int operationIndex = 0)
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->Rerun");
            }

            // verify the required parameter 'rerunWorkflowRequest' is set
            if (rerunWorkflowRequest == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'rerunWorkflowRequest' when calling WorkflowResourceApi->Rerun");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter
            localVarRequestOptions.Data = rerunWorkflowRequest;

            localVarRequestOptions.Operation = "WorkflowResourceApi.Rerun";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/api/workflow/{workflowId}/rerun", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Rerun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reruns the workflow from a specific task 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="rerunWorkflowRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> RerunAsync(string workflowId, RerunWorkflowRequest rerunWorkflowRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<string> localVarResponse = await RerunWithHttpInfoAsync(workflowId, rerunWorkflowRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reruns the workflow from a specific task 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="rerunWorkflowRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<string>> RerunWithHttpInfoAsync(string workflowId, RerunWorkflowRequest rerunWorkflowRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->Rerun");
            }

            // verify the required parameter 'rerunWorkflowRequest' is set
            if (rerunWorkflowRequest == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'rerunWorkflowRequest' when calling WorkflowResourceApi->Rerun");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter
            localVarRequestOptions.Data = rerunWorkflowRequest;

            localVarRequestOptions.Operation = "WorkflowResourceApi.Rerun";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/api/workflow/{workflowId}/rerun", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Rerun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resets callback times of all non-terminal CUSTOM tasks to 0 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ResetWorkflow(string workflowId, int operationIndex = 0)
        {
            ResetWorkflowWithHttpInfo(workflowId);
        }

        /// <summary>
        /// Resets callback times of all non-terminal CUSTOM tasks to 0 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SwiftConductor.Client.ApiResponse<Object> ResetWorkflowWithHttpInfo(string workflowId, int operationIndex = 0)
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->ResetWorkflow");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter

            localVarRequestOptions.Operation = "WorkflowResourceApi.ResetWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/workflow/{workflowId}/resetcallbacks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resets callback times of all non-terminal CUSTOM tasks to 0 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResetWorkflowAsync(string workflowId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ResetWorkflowWithHttpInfoAsync(workflowId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Resets callback times of all non-terminal CUSTOM tasks to 0 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Object>> ResetWorkflowWithHttpInfoAsync(string workflowId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->ResetWorkflow");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter

            localVarRequestOptions.Operation = "WorkflowResourceApi.ResetWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/workflow/{workflowId}/resetcallbacks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restarts a completed workflow 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="useLatestDefinitions"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Restart(string workflowId, bool? useLatestDefinitions = default(bool?), int operationIndex = 0)
        {
            RestartWithHttpInfo(workflowId, useLatestDefinitions);
        }

        /// <summary>
        /// Restarts a completed workflow 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="useLatestDefinitions"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SwiftConductor.Client.ApiResponse<Object> RestartWithHttpInfo(string workflowId, bool? useLatestDefinitions = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->Restart");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter
            if (useLatestDefinitions != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "useLatestDefinitions", useLatestDefinitions));
            }

            localVarRequestOptions.Operation = "WorkflowResourceApi.Restart";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/workflow/{workflowId}/restart", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Restart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restarts a completed workflow 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="useLatestDefinitions"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RestartAsync(string workflowId, bool? useLatestDefinitions = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RestartWithHttpInfoAsync(workflowId, useLatestDefinitions, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Restarts a completed workflow 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="useLatestDefinitions"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Object>> RestartWithHttpInfoAsync(string workflowId, bool? useLatestDefinitions = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->Restart");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter
            if (useLatestDefinitions != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "useLatestDefinitions", useLatestDefinitions));
            }

            localVarRequestOptions.Operation = "WorkflowResourceApi.Restart";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/workflow/{workflowId}/restart", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Restart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resumes the workflow 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ResumeWorkflow(string workflowId, int operationIndex = 0)
        {
            ResumeWorkflowWithHttpInfo(workflowId);
        }

        /// <summary>
        /// Resumes the workflow 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SwiftConductor.Client.ApiResponse<Object> ResumeWorkflowWithHttpInfo(string workflowId, int operationIndex = 0)
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->ResumeWorkflow");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter

            localVarRequestOptions.Operation = "WorkflowResourceApi.ResumeWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/workflow/{workflowId}/resume", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resumes the workflow 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResumeWorkflowAsync(string workflowId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ResumeWorkflowWithHttpInfoAsync(workflowId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Resumes the workflow 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Object>> ResumeWorkflowWithHttpInfoAsync(string workflowId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->ResumeWorkflow");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter

            localVarRequestOptions.Operation = "WorkflowResourceApi.ResumeWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/workflow/{workflowId}/resume", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retries the last failed task 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="resumeSubworkflowTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Retry(string workflowId, bool? resumeSubworkflowTasks = default(bool?), int operationIndex = 0)
        {
            RetryWithHttpInfo(workflowId, resumeSubworkflowTasks);
        }

        /// <summary>
        /// Retries the last failed task 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="resumeSubworkflowTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SwiftConductor.Client.ApiResponse<Object> RetryWithHttpInfo(string workflowId, bool? resumeSubworkflowTasks = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->Retry");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter
            if (resumeSubworkflowTasks != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "resumeSubworkflowTasks", resumeSubworkflowTasks));
            }

            localVarRequestOptions.Operation = "WorkflowResourceApi.Retry";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/workflow/{workflowId}/retry", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Retry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retries the last failed task 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="resumeSubworkflowTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RetryAsync(string workflowId, bool? resumeSubworkflowTasks = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RetryWithHttpInfoAsync(workflowId, resumeSubworkflowTasks, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retries the last failed task 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="resumeSubworkflowTasks"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Object>> RetryWithHttpInfoAsync(string workflowId, bool? resumeSubworkflowTasks = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->Retry");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter
            if (resumeSubworkflowTasks != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "resumeSubworkflowTasks", resumeSubworkflowTasks));
            }

            localVarRequestOptions.Operation = "WorkflowResourceApi.Retry";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/workflow/{workflowId}/retry", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Retry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for workflows based on payload and other parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResultWorkflowSummary</returns>
        public SearchResultWorkflowSummary Search(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<SearchResultWorkflowSummary> localVarResponse = SearchWithHttpInfo(start, size, sort, freeText, query);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for workflows based on payload and other parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResultWorkflowSummary</returns>
        public SwiftConductor.Client.ApiResponse<SearchResultWorkflowSummary> SearchWithHttpInfo(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0)
        {
            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (freeText != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "freeText", freeText));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }

            localVarRequestOptions.Operation = "WorkflowResourceApi.Search";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchResultWorkflowSummary>("/api/workflow/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Search", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for workflows based on payload and other parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResultWorkflowSummary</returns>
        public async System.Threading.Tasks.Task<SearchResultWorkflowSummary> SearchAsync(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<SearchResultWorkflowSummary> localVarResponse = await SearchWithHttpInfoAsync(start, size, sort, freeText, query, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for workflows based on payload and other parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResultWorkflowSummary)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<SearchResultWorkflowSummary>> SearchWithHttpInfoAsync(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (freeText != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "freeText", freeText));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }

            localVarRequestOptions.Operation = "WorkflowResourceApi.Search";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchResultWorkflowSummary>("/api/workflow/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Search", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for workflows based on payload and other parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResultWorkflow</returns>
        public SearchResultWorkflow SearchV2(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<SearchResultWorkflow> localVarResponse = SearchV2WithHttpInfo(start, size, sort, freeText, query);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for workflows based on payload and other parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResultWorkflow</returns>
        public SwiftConductor.Client.ApiResponse<SearchResultWorkflow> SearchV2WithHttpInfo(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0)
        {
            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (freeText != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "freeText", freeText));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }

            localVarRequestOptions.Operation = "WorkflowResourceApi.SearchV2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchResultWorkflow>("/api/workflow/search-v2", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for workflows based on payload and other parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResultWorkflow</returns>
        public async System.Threading.Tasks.Task<SearchResultWorkflow> SearchV2Async(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<SearchResultWorkflow> localVarResponse = await SearchV2WithHttpInfoAsync(start, size, sort, freeText, query, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for workflows based on payload and other parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC.
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResultWorkflow)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<SearchResultWorkflow>> SearchV2WithHttpInfoAsync(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (freeText != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "freeText", freeText));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }

            localVarRequestOptions.Operation = "WorkflowResourceApi.SearchV2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchResultWorkflow>("/api/workflow/search-v2", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for workflows based on task parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResultWorkflowSummary</returns>
        public SearchResultWorkflowSummary SearchWorkflowsByTasks(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<SearchResultWorkflowSummary> localVarResponse = SearchWorkflowsByTasksWithHttpInfo(start, size, sort, freeText, query);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for workflows based on task parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResultWorkflowSummary</returns>
        public SwiftConductor.Client.ApiResponse<SearchResultWorkflowSummary> SearchWorkflowsByTasksWithHttpInfo(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0)
        {
            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (freeText != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "freeText", freeText));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }

            localVarRequestOptions.Operation = "WorkflowResourceApi.SearchWorkflowsByTasks";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchResultWorkflowSummary>("/api/workflow/search-by-tasks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchWorkflowsByTasks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for workflows based on task parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResultWorkflowSummary</returns>
        public async System.Threading.Tasks.Task<SearchResultWorkflowSummary> SearchWorkflowsByTasksAsync(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<SearchResultWorkflowSummary> localVarResponse = await SearchWorkflowsByTasksWithHttpInfoAsync(start, size, sort, freeText, query, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for workflows based on task parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResultWorkflowSummary)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<SearchResultWorkflowSummary>> SearchWorkflowsByTasksWithHttpInfoAsync(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (freeText != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "freeText", freeText));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }

            localVarRequestOptions.Operation = "WorkflowResourceApi.SearchWorkflowsByTasks";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchResultWorkflowSummary>("/api/workflow/search-by-tasks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchWorkflowsByTasks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for workflows based on task parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResultWorkflow</returns>
        public SearchResultWorkflow SearchWorkflowsByTasksV2(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<SearchResultWorkflow> localVarResponse = SearchWorkflowsByTasksV2WithHttpInfo(start, size, sort, freeText, query);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for workflows based on task parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResultWorkflow</returns>
        public SwiftConductor.Client.ApiResponse<SearchResultWorkflow> SearchWorkflowsByTasksV2WithHttpInfo(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0)
        {
            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (freeText != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "freeText", freeText));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }

            localVarRequestOptions.Operation = "WorkflowResourceApi.SearchWorkflowsByTasksV2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchResultWorkflow>("/api/workflow/search-by-tasks-v2", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchWorkflowsByTasksV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for workflows based on task parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResultWorkflow</returns>
        public async System.Threading.Tasks.Task<SearchResultWorkflow> SearchWorkflowsByTasksV2Async(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<SearchResultWorkflow> localVarResponse = await SearchWorkflowsByTasksV2WithHttpInfoAsync(start, size, sort, freeText, query, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for workflows based on task parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResultWorkflow)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<SearchResultWorkflow>> SearchWorkflowsByTasksV2WithHttpInfoAsync(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (freeText != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "freeText", freeText));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }

            localVarRequestOptions.Operation = "WorkflowResourceApi.SearchWorkflowsByTasksV2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchResultWorkflow>("/api/workflow/search-by-tasks-v2", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchWorkflowsByTasksV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Skips a given task from a current running workflow 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskReferenceName"></param>
        /// <param name="skipTaskRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SkipTaskFromWorkflow(string workflowId, string taskReferenceName, SkipTaskRequest skipTaskRequest, int operationIndex = 0)
        {
            SkipTaskFromWorkflowWithHttpInfo(workflowId, taskReferenceName, skipTaskRequest);
        }

        /// <summary>
        /// Skips a given task from a current running workflow 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskReferenceName"></param>
        /// <param name="skipTaskRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SwiftConductor.Client.ApiResponse<Object> SkipTaskFromWorkflowWithHttpInfo(string workflowId, string taskReferenceName, SkipTaskRequest skipTaskRequest, int operationIndex = 0)
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->SkipTaskFromWorkflow");
            }

            // verify the required parameter 'taskReferenceName' is set
            if (taskReferenceName == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskReferenceName' when calling WorkflowResourceApi->SkipTaskFromWorkflow");
            }

            // verify the required parameter 'skipTaskRequest' is set
            if (skipTaskRequest == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'skipTaskRequest' when calling WorkflowResourceApi->SkipTaskFromWorkflow");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter
            localVarRequestOptions.PathParameters.Add("taskReferenceName", SwiftConductor.Client.ClientUtils.ParameterToString(taskReferenceName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "skipTaskRequest", skipTaskRequest));

            localVarRequestOptions.Operation = "WorkflowResourceApi.SkipTaskFromWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/workflow/{workflowId}/skiptask/{taskReferenceName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SkipTaskFromWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Skips a given task from a current running workflow 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskReferenceName"></param>
        /// <param name="skipTaskRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SkipTaskFromWorkflowAsync(string workflowId, string taskReferenceName, SkipTaskRequest skipTaskRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SkipTaskFromWorkflowWithHttpInfoAsync(workflowId, taskReferenceName, skipTaskRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Skips a given task from a current running workflow 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskReferenceName"></param>
        /// <param name="skipTaskRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Object>> SkipTaskFromWorkflowWithHttpInfoAsync(string workflowId, string taskReferenceName, SkipTaskRequest skipTaskRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->SkipTaskFromWorkflow");
            }

            // verify the required parameter 'taskReferenceName' is set
            if (taskReferenceName == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskReferenceName' when calling WorkflowResourceApi->SkipTaskFromWorkflow");
            }

            // verify the required parameter 'skipTaskRequest' is set
            if (skipTaskRequest == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'skipTaskRequest' when calling WorkflowResourceApi->SkipTaskFromWorkflow");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter
            localVarRequestOptions.PathParameters.Add("taskReferenceName", SwiftConductor.Client.ClientUtils.ParameterToString(taskReferenceName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "skipTaskRequest", skipTaskRequest));

            localVarRequestOptions.Operation = "WorkflowResourceApi.SkipTaskFromWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/workflow/{workflowId}/skiptask/{taskReferenceName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SkipTaskFromWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a new workflow with StartWorkflowRequest, which allows task to be executed in a domain 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startWorkflowRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string StartWorkflow(StartWorkflowRequest startWorkflowRequest, int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<string> localVarResponse = StartWorkflowWithHttpInfo(startWorkflowRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a new workflow with StartWorkflowRequest, which allows task to be executed in a domain 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startWorkflowRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public SwiftConductor.Client.ApiResponse<string> StartWorkflowWithHttpInfo(StartWorkflowRequest startWorkflowRequest, int operationIndex = 0)
        {
            // verify the required parameter 'startWorkflowRequest' is set
            if (startWorkflowRequest == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'startWorkflowRequest' when calling WorkflowResourceApi->StartWorkflow");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = startWorkflowRequest;

            localVarRequestOptions.Operation = "WorkflowResourceApi.StartWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/api/workflow", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a new workflow with StartWorkflowRequest, which allows task to be executed in a domain 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startWorkflowRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> StartWorkflowAsync(StartWorkflowRequest startWorkflowRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<string> localVarResponse = await StartWorkflowWithHttpInfoAsync(startWorkflowRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a new workflow with StartWorkflowRequest, which allows task to be executed in a domain 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startWorkflowRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<string>> StartWorkflowWithHttpInfoAsync(StartWorkflowRequest startWorkflowRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'startWorkflowRequest' is set
            if (startWorkflowRequest == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'startWorkflowRequest' when calling WorkflowResourceApi->StartWorkflow");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = startWorkflowRequest;

            localVarRequestOptions.Operation = "WorkflowResourceApi.StartWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/api/workflow", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a new workflow. Returns the ID of the workflow instance that can be later used for tracking 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="requestBody"></param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="correlationId"> (optional)</param>
        /// <param name="priority"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string StartWorkflow1(string name, Dictionary<string, Object> requestBody, int? varVersion = default(int?), string? correlationId = default(string?), int? priority = default(int?), int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<string> localVarResponse = StartWorkflow1WithHttpInfo(name, requestBody, varVersion, correlationId, priority);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a new workflow. Returns the ID of the workflow instance that can be later used for tracking 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="requestBody"></param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="correlationId"> (optional)</param>
        /// <param name="priority"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public SwiftConductor.Client.ApiResponse<string> StartWorkflow1WithHttpInfo(string name, Dictionary<string, Object> requestBody, int? varVersion = default(int?), string? correlationId = default(string?), int? priority = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowResourceApi->StartWorkflow1");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'requestBody' when calling WorkflowResourceApi->StartWorkflow1");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", SwiftConductor.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (varVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "version", varVersion));
            }
            if (correlationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "correlationId", correlationId));
            }
            if (priority != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "priority", priority));
            }
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "WorkflowResourceApi.StartWorkflow1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/api/workflow/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartWorkflow1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a new workflow. Returns the ID of the workflow instance that can be later used for tracking 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="requestBody"></param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="correlationId"> (optional)</param>
        /// <param name="priority"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> StartWorkflow1Async(string name, Dictionary<string, Object> requestBody, int? varVersion = default(int?), string? correlationId = default(string?), int? priority = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<string> localVarResponse = await StartWorkflow1WithHttpInfoAsync(name, requestBody, varVersion, correlationId, priority, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a new workflow. Returns the ID of the workflow instance that can be later used for tracking 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="requestBody"></param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="correlationId"> (optional)</param>
        /// <param name="priority"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<string>> StartWorkflow1WithHttpInfoAsync(string name, Dictionary<string, Object> requestBody, int? varVersion = default(int?), string? correlationId = default(string?), int? priority = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'name' when calling WorkflowResourceApi->StartWorkflow1");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'requestBody' when calling WorkflowResourceApi->StartWorkflow1");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", SwiftConductor.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (varVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "version", varVersion));
            }
            if (correlationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "correlationId", correlationId));
            }
            if (priority != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "priority", priority));
            }
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "WorkflowResourceApi.StartWorkflow1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/api/workflow/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartWorkflow1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Terminate workflow execution 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="reason"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Terminate1(string workflowId, string? reason = default(string?), int operationIndex = 0)
        {
            Terminate1WithHttpInfo(workflowId, reason);
        }

        /// <summary>
        /// Terminate workflow execution 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="reason"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SwiftConductor.Client.ApiResponse<Object> Terminate1WithHttpInfo(string workflowId, string? reason = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->Terminate1");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter
            if (reason != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "reason", reason));
            }

            localVarRequestOptions.Operation = "WorkflowResourceApi.Terminate1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/workflow/{workflowId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Terminate1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Terminate workflow execution 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="reason"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Terminate1Async(string workflowId, string? reason = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await Terminate1WithHttpInfoAsync(workflowId, reason, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Terminate workflow execution 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="reason"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Object>> Terminate1WithHttpInfoAsync(string workflowId, string? reason = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling WorkflowResourceApi->Terminate1");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter
            if (reason != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "reason", reason));
            }

            localVarRequestOptions.Operation = "WorkflowResourceApi.Terminate1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/workflow/{workflowId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Terminate1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test workflow execution using mock data 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Workflow</returns>
        public Workflow TestWorkflow(WorkflowTestRequest workflowTestRequest, int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<Workflow> localVarResponse = TestWorkflowWithHttpInfo(workflowTestRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test workflow execution using mock data 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Workflow</returns>
        public SwiftConductor.Client.ApiResponse<Workflow> TestWorkflowWithHttpInfo(WorkflowTestRequest workflowTestRequest, int operationIndex = 0)
        {
            // verify the required parameter 'workflowTestRequest' is set
            if (workflowTestRequest == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowTestRequest' when calling WorkflowResourceApi->TestWorkflow");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowTestRequest;

            localVarRequestOptions.Operation = "WorkflowResourceApi.TestWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Workflow>("/api/workflow/test", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test workflow execution using mock data 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Workflow</returns>
        public async System.Threading.Tasks.Task<Workflow> TestWorkflowAsync(WorkflowTestRequest workflowTestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<Workflow> localVarResponse = await TestWorkflowWithHttpInfoAsync(workflowTestRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test workflow execution using mock data 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowTestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Workflow)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Workflow>> TestWorkflowWithHttpInfoAsync(WorkflowTestRequest workflowTestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workflowTestRequest' is set
            if (workflowTestRequest == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowTestRequest' when calling WorkflowResourceApi->TestWorkflow");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowTestRequest;

            localVarRequestOptions.Operation = "WorkflowResourceApi.TestWorkflow";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Workflow>("/api/workflow/test", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestWorkflow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
