/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SwiftConductor.Client;
using SwiftConductor.Model;

namespace SwiftConductor.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventResourceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a new event handler.
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHandler"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AddEventHandler(EventHandler eventHandler, int operationIndex = 0);

        /// <summary>
        /// Add a new event handler.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHandler"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddEventHandlerWithHttpInfo(EventHandler eventHandler, int operationIndex = 0);
        /// <summary>
        /// Get all the event handlers
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EventHandler&gt;</returns>
        List<EventHandler> GetEventHandlers(int operationIndex = 0);

        /// <summary>
        /// Get all the event handlers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EventHandler&gt;</returns>
        ApiResponse<List<EventHandler>> GetEventHandlersWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get event handlers for a given event
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varEvent"></param>
        /// <param name="activeOnly"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EventHandler&gt;</returns>
        List<EventHandler> GetEventHandlersForEvent(string varEvent, bool? activeOnly = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get event handlers for a given event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varEvent"></param>
        /// <param name="activeOnly"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EventHandler&gt;</returns>
        ApiResponse<List<EventHandler>> GetEventHandlersForEventWithHttpInfo(string varEvent, bool? activeOnly = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Remove an event handler
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveEventHandlerStatus(string name, int operationIndex = 0);

        /// <summary>
        /// Remove an event handler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveEventHandlerStatusWithHttpInfo(string name, int operationIndex = 0);
        /// <summary>
        /// Update an existing event handler.
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHandler"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateEventHandler(EventHandler eventHandler, int operationIndex = 0);

        /// <summary>
        /// Update an existing event handler.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHandler"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateEventHandlerWithHttpInfo(EventHandler eventHandler, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventResourceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a new event handler.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHandler"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddEventHandlerAsync(EventHandler eventHandler, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a new event handler.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHandler"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddEventHandlerWithHttpInfoAsync(EventHandler eventHandler, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all the event handlers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EventHandler&gt;</returns>
        System.Threading.Tasks.Task<List<EventHandler>> GetEventHandlersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all the event handlers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EventHandler&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EventHandler>>> GetEventHandlersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get event handlers for a given event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varEvent"></param>
        /// <param name="activeOnly"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EventHandler&gt;</returns>
        System.Threading.Tasks.Task<List<EventHandler>> GetEventHandlersForEventAsync(string varEvent, bool? activeOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get event handlers for a given event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varEvent"></param>
        /// <param name="activeOnly"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EventHandler&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EventHandler>>> GetEventHandlersForEventWithHttpInfoAsync(string varEvent, bool? activeOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove an event handler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveEventHandlerStatusAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove an event handler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveEventHandlerStatusWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing event handler.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHandler"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateEventHandlerAsync(EventHandler eventHandler, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing event handler.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHandler"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateEventHandlerWithHttpInfoAsync(EventHandler eventHandler, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventResourceApi : IEventResourceApiSync, IEventResourceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventResourceApi : IEventResourceApi
    {
        private SwiftConductor.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventResourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventResourceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventResourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventResourceApi(string basePath)
        {
            this.Configuration = SwiftConductor.Client.Configuration.MergeConfigurations(
                SwiftConductor.Client.GlobalConfiguration.Instance,
                new SwiftConductor.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SwiftConductor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SwiftConductor.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SwiftConductor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventResourceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventResourceApi(SwiftConductor.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SwiftConductor.Client.Configuration.MergeConfigurations(
                SwiftConductor.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SwiftConductor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SwiftConductor.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SwiftConductor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventResourceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EventResourceApi(SwiftConductor.Client.ISynchronousClient client, SwiftConductor.Client.IAsynchronousClient asyncClient, SwiftConductor.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SwiftConductor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SwiftConductor.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SwiftConductor.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SwiftConductor.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SwiftConductor.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a new event handler. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHandler"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AddEventHandler(EventHandler eventHandler, int operationIndex = 0)
        {
            AddEventHandlerWithHttpInfo(eventHandler);
        }

        /// <summary>
        /// Add a new event handler. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHandler"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SwiftConductor.Client.ApiResponse<Object> AddEventHandlerWithHttpInfo(EventHandler eventHandler, int operationIndex = 0)
        {
            // verify the required parameter 'eventHandler' is set
            if (eventHandler == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'eventHandler' when calling EventResourceApi->AddEventHandler");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eventHandler;

            localVarRequestOptions.Operation = "EventResourceApi.AddEventHandler";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/event", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddEventHandler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new event handler. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHandler"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddEventHandlerAsync(EventHandler eventHandler, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddEventHandlerWithHttpInfoAsync(eventHandler, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add a new event handler. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHandler"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Object>> AddEventHandlerWithHttpInfoAsync(EventHandler eventHandler, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventHandler' is set
            if (eventHandler == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'eventHandler' when calling EventResourceApi->AddEventHandler");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eventHandler;

            localVarRequestOptions.Operation = "EventResourceApi.AddEventHandler";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/event", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddEventHandler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the event handlers 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EventHandler&gt;</returns>
        public List<EventHandler> GetEventHandlers(int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<List<EventHandler>> localVarResponse = GetEventHandlersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the event handlers 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EventHandler&gt;</returns>
        public SwiftConductor.Client.ApiResponse<List<EventHandler>> GetEventHandlersWithHttpInfo(int operationIndex = 0)
        {
            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EventResourceApi.GetEventHandlers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EventHandler>>("/api/event", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventHandlers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the event handlers 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EventHandler&gt;</returns>
        public async System.Threading.Tasks.Task<List<EventHandler>> GetEventHandlersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<List<EventHandler>> localVarResponse = await GetEventHandlersWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the event handlers 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EventHandler&gt;)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<List<EventHandler>>> GetEventHandlersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EventResourceApi.GetEventHandlers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EventHandler>>("/api/event", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventHandlers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get event handlers for a given event 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varEvent"></param>
        /// <param name="activeOnly"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EventHandler&gt;</returns>
        public List<EventHandler> GetEventHandlersForEvent(string varEvent, bool? activeOnly = default(bool?), int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<List<EventHandler>> localVarResponse = GetEventHandlersForEventWithHttpInfo(varEvent, activeOnly);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get event handlers for a given event 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varEvent"></param>
        /// <param name="activeOnly"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EventHandler&gt;</returns>
        public SwiftConductor.Client.ApiResponse<List<EventHandler>> GetEventHandlersForEventWithHttpInfo(string varEvent, bool? activeOnly = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'varEvent' is set
            if (varEvent == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'varEvent' when calling EventResourceApi->GetEventHandlersForEvent");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("event", SwiftConductor.Client.ClientUtils.ParameterToString(varEvent)); // path parameter
            if (activeOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "activeOnly", activeOnly));
            }

            localVarRequestOptions.Operation = "EventResourceApi.GetEventHandlersForEvent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EventHandler>>("/api/event/{event}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventHandlersForEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get event handlers for a given event 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varEvent"></param>
        /// <param name="activeOnly"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EventHandler&gt;</returns>
        public async System.Threading.Tasks.Task<List<EventHandler>> GetEventHandlersForEventAsync(string varEvent, bool? activeOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<List<EventHandler>> localVarResponse = await GetEventHandlersForEventWithHttpInfoAsync(varEvent, activeOnly, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get event handlers for a given event 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varEvent"></param>
        /// <param name="activeOnly"> (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EventHandler&gt;)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<List<EventHandler>>> GetEventHandlersForEventWithHttpInfoAsync(string varEvent, bool? activeOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'varEvent' is set
            if (varEvent == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'varEvent' when calling EventResourceApi->GetEventHandlersForEvent");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("event", SwiftConductor.Client.ClientUtils.ParameterToString(varEvent)); // path parameter
            if (activeOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "activeOnly", activeOnly));
            }

            localVarRequestOptions.Operation = "EventResourceApi.GetEventHandlersForEvent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EventHandler>>("/api/event/{event}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventHandlersForEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an event handler 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveEventHandlerStatus(string name, int operationIndex = 0)
        {
            RemoveEventHandlerStatusWithHttpInfo(name);
        }

        /// <summary>
        /// Remove an event handler 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SwiftConductor.Client.ApiResponse<Object> RemoveEventHandlerStatusWithHttpInfo(string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'name' when calling EventResourceApi->RemoveEventHandlerStatus");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", SwiftConductor.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "EventResourceApi.RemoveEventHandlerStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/event/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveEventHandlerStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an event handler 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveEventHandlerStatusAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveEventHandlerStatusWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove an event handler 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Object>> RemoveEventHandlerStatusWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'name' when calling EventResourceApi->RemoveEventHandlerStatus");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", SwiftConductor.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "EventResourceApi.RemoveEventHandlerStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/event/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveEventHandlerStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing event handler. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHandler"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateEventHandler(EventHandler eventHandler, int operationIndex = 0)
        {
            UpdateEventHandlerWithHttpInfo(eventHandler);
        }

        /// <summary>
        /// Update an existing event handler. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHandler"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SwiftConductor.Client.ApiResponse<Object> UpdateEventHandlerWithHttpInfo(EventHandler eventHandler, int operationIndex = 0)
        {
            // verify the required parameter 'eventHandler' is set
            if (eventHandler == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'eventHandler' when calling EventResourceApi->UpdateEventHandler");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eventHandler;

            localVarRequestOptions.Operation = "EventResourceApi.UpdateEventHandler";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/event", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEventHandler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing event handler. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHandler"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateEventHandlerAsync(EventHandler eventHandler, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateEventHandlerWithHttpInfoAsync(eventHandler, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update an existing event handler. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHandler"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Object>> UpdateEventHandlerWithHttpInfoAsync(EventHandler eventHandler, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventHandler' is set
            if (eventHandler == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'eventHandler' when calling EventResourceApi->UpdateEventHandler");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eventHandler;

            localVarRequestOptions.Operation = "EventResourceApi.UpdateEventHandler";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/event", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEventHandler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
