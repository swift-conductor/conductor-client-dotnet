/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SwiftConductor.Client;
using SwiftConductor.Model;

namespace SwiftConductor.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataResourceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new workflow definition
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Create(WorkflowDef workflowDef, int operationIndex = 0);

        /// <summary>
        /// Create a new workflow definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateWithHttpInfo(WorkflowDef workflowDef, int operationIndex = 0);
        /// <summary>
        /// Retrieves workflow definition along with blueprint
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowDef</returns>
        WorkflowDef Get(string name, int? varVersion = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieves workflow definition along with blueprint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowDef</returns>
        ApiResponse<WorkflowDef> GetWithHttpInfo(string name, int? varVersion = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieves all workflow definition along with blueprint
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;WorkflowDef&gt;</returns>
        List<WorkflowDef> GetAll(int operationIndex = 0);

        /// <summary>
        /// Retrieves all workflow definition along with blueprint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;WorkflowDef&gt;</returns>
        ApiResponse<List<WorkflowDef>> GetAllWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Returns only the latest version of all workflow definitions
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;WorkflowDef&gt;</returns>
        List<WorkflowDef> GetAllWorkflowsWithLatestVersions(int operationIndex = 0);

        /// <summary>
        /// Returns only the latest version of all workflow definitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;WorkflowDef&gt;</returns>
        ApiResponse<List<WorkflowDef>> GetAllWorkflowsWithLatestVersionsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Gets the task definition
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaskDef</returns>
        TaskDef GetTaskDef(string tasktype, int operationIndex = 0);

        /// <summary>
        /// Gets the task definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaskDef</returns>
        ApiResponse<TaskDef> GetTaskDefWithHttpInfo(string tasktype, int operationIndex = 0);
        /// <summary>
        /// Gets all task definition
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TaskDef&gt;</returns>
        List<TaskDef> GetTaskDefs(int operationIndex = 0);

        /// <summary>
        /// Gets all task definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TaskDef&gt;</returns>
        ApiResponse<List<TaskDef>> GetTaskDefsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Returns workflow names and versions only (no definition bodies)
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> GetWorkflowNamesAndVersions(int operationIndex = 0);

        /// <summary>
        /// Returns workflow names and versions only (no definition bodies)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> GetWorkflowNamesAndVersionsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update an existing task
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RegisterTaskDef(TaskDef taskDef, int operationIndex = 0);

        /// <summary>
        /// Update an existing task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RegisterTaskDefWithHttpInfo(TaskDef taskDef, int operationIndex = 0);
        /// <summary>
        /// Create new task definition(s)
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RegisterTaskDef1(List<TaskDef> taskDef, int operationIndex = 0);

        /// <summary>
        /// Create new task definition(s)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RegisterTaskDef1WithHttpInfo(List<TaskDef> taskDef, int operationIndex = 0);
        /// <summary>
        /// Remove a task definition
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UnregisterTaskDef(string tasktype, int operationIndex = 0);

        /// <summary>
        /// Remove a task definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnregisterTaskDefWithHttpInfo(string tasktype, int operationIndex = 0);
        /// <summary>
        /// Removes workflow definition. It does not remove workflows associated with the definition.
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UnregisterWorkflowDef(string name, int varVersion, int operationIndex = 0);

        /// <summary>
        /// Removes workflow definition. It does not remove workflows associated with the definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnregisterWorkflowDefWithHttpInfo(string name, int varVersion, int operationIndex = 0);
        /// <summary>
        /// Create or update workflow definition
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BulkResponse</returns>
        BulkResponse Update(List<WorkflowDef> workflowDef, int operationIndex = 0);

        /// <summary>
        /// Create or update workflow definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BulkResponse</returns>
        ApiResponse<BulkResponse> UpdateWithHttpInfo(List<WorkflowDef> workflowDef, int operationIndex = 0);
        /// <summary>
        /// Validates a new workflow definition
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Validate(WorkflowDef workflowDef, int operationIndex = 0);

        /// <summary>
        /// Validates a new workflow definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ValidateWithHttpInfo(WorkflowDef workflowDef, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataResourceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new workflow definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateAsync(WorkflowDef workflowDef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new workflow definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateWithHttpInfoAsync(WorkflowDef workflowDef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves workflow definition along with blueprint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowDef</returns>
        System.Threading.Tasks.Task<WorkflowDef> GetAsync(string name, int? varVersion = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves workflow definition along with blueprint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowDef)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowDef>> GetWithHttpInfoAsync(string name, int? varVersion = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves all workflow definition along with blueprint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkflowDef&gt;</returns>
        System.Threading.Tasks.Task<List<WorkflowDef>> GetAllAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves all workflow definition along with blueprint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkflowDef&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkflowDef>>> GetAllWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns only the latest version of all workflow definitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkflowDef&gt;</returns>
        System.Threading.Tasks.Task<List<WorkflowDef>> GetAllWorkflowsWithLatestVersionsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns only the latest version of all workflow definitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkflowDef&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkflowDef>>> GetAllWorkflowsWithLatestVersionsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the task definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskDef</returns>
        System.Threading.Tasks.Task<TaskDef> GetTaskDefAsync(string tasktype, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the task definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskDef)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskDef>> GetTaskDefWithHttpInfoAsync(string tasktype, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets all task definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskDef&gt;</returns>
        System.Threading.Tasks.Task<List<TaskDef>> GetTaskDefsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets all task definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskDef&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskDef>>> GetTaskDefsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns workflow names and versions only (no definition bodies)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> GetWorkflowNamesAndVersionsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns workflow names and versions only (no definition bodies)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GetWorkflowNamesAndVersionsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RegisterTaskDefAsync(TaskDef taskDef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RegisterTaskDefWithHttpInfoAsync(TaskDef taskDef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create new task definition(s)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RegisterTaskDef1Async(List<TaskDef> taskDef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create new task definition(s)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RegisterTaskDef1WithHttpInfoAsync(List<TaskDef> taskDef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a task definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnregisterTaskDefAsync(string tasktype, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a task definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnregisterTaskDefWithHttpInfoAsync(string tasktype, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Removes workflow definition. It does not remove workflows associated with the definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnregisterWorkflowDefAsync(string name, int varVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes workflow definition. It does not remove workflows associated with the definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnregisterWorkflowDefWithHttpInfoAsync(string name, int varVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create or update workflow definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BulkResponse</returns>
        System.Threading.Tasks.Task<BulkResponse> UpdateAsync(List<WorkflowDef> workflowDef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create or update workflow definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BulkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BulkResponse>> UpdateWithHttpInfoAsync(List<WorkflowDef> workflowDef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Validates a new workflow definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ValidateAsync(WorkflowDef workflowDef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validates a new workflow definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ValidateWithHttpInfoAsync(WorkflowDef workflowDef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataResourceApi : IMetadataResourceApiSync, IMetadataResourceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MetadataResourceApi : IMetadataResourceApi
    {
        private SwiftConductor.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataResourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetadataResourceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataResourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetadataResourceApi(string basePath)
        {
            this.Configuration = SwiftConductor.Client.Configuration.MergeConfigurations(
                SwiftConductor.Client.GlobalConfiguration.Instance,
                new SwiftConductor.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SwiftConductor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SwiftConductor.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SwiftConductor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataResourceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MetadataResourceApi(SwiftConductor.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SwiftConductor.Client.Configuration.MergeConfigurations(
                SwiftConductor.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SwiftConductor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SwiftConductor.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SwiftConductor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataResourceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MetadataResourceApi(SwiftConductor.Client.ISynchronousClient client, SwiftConductor.Client.IAsynchronousClient asyncClient, SwiftConductor.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SwiftConductor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SwiftConductor.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SwiftConductor.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SwiftConductor.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SwiftConductor.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new workflow definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Create(WorkflowDef workflowDef, int operationIndex = 0)
        {
            CreateWithHttpInfo(workflowDef);
        }

        /// <summary>
        /// Create a new workflow definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SwiftConductor.Client.ApiResponse<Object> CreateWithHttpInfo(WorkflowDef workflowDef, int operationIndex = 0)
        {
            // verify the required parameter 'workflowDef' is set
            if (workflowDef == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowDef' when calling MetadataResourceApi->Create");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowDef;

            localVarRequestOptions.Operation = "MetadataResourceApi.Create";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/metadata/workflow", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Create", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new workflow definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateAsync(WorkflowDef workflowDef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateWithHttpInfoAsync(workflowDef, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a new workflow definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Object>> CreateWithHttpInfoAsync(WorkflowDef workflowDef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workflowDef' is set
            if (workflowDef == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowDef' when calling MetadataResourceApi->Create");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowDef;

            localVarRequestOptions.Operation = "MetadataResourceApi.Create";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/metadata/workflow", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Create", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves workflow definition along with blueprint 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowDef</returns>
        public WorkflowDef Get(string name, int? varVersion = default(int?), int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<WorkflowDef> localVarResponse = GetWithHttpInfo(name, varVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves workflow definition along with blueprint 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowDef</returns>
        public SwiftConductor.Client.ApiResponse<WorkflowDef> GetWithHttpInfo(string name, int? varVersion = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataResourceApi->Get");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", SwiftConductor.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (varVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "version", varVersion));
            }

            localVarRequestOptions.Operation = "MetadataResourceApi.Get";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<WorkflowDef>("/api/metadata/workflow/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves workflow definition along with blueprint 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowDef</returns>
        public async System.Threading.Tasks.Task<WorkflowDef> GetAsync(string name, int? varVersion = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<WorkflowDef> localVarResponse = await GetWithHttpInfoAsync(name, varVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves workflow definition along with blueprint 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowDef)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<WorkflowDef>> GetWithHttpInfoAsync(string name, int? varVersion = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataResourceApi->Get");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", SwiftConductor.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (varVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "version", varVersion));
            }

            localVarRequestOptions.Operation = "MetadataResourceApi.Get";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<WorkflowDef>("/api/metadata/workflow/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all workflow definition along with blueprint 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;WorkflowDef&gt;</returns>
        public List<WorkflowDef> GetAll(int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<List<WorkflowDef>> localVarResponse = GetAllWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all workflow definition along with blueprint 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;WorkflowDef&gt;</returns>
        public SwiftConductor.Client.ApiResponse<List<WorkflowDef>> GetAllWithHttpInfo(int operationIndex = 0)
        {
            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MetadataResourceApi.GetAll";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<WorkflowDef>>("/api/metadata/workflow", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all workflow definition along with blueprint 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkflowDef&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkflowDef>> GetAllAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<List<WorkflowDef>> localVarResponse = await GetAllWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all workflow definition along with blueprint 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkflowDef&gt;)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<List<WorkflowDef>>> GetAllWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MetadataResourceApi.GetAll";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<WorkflowDef>>("/api/metadata/workflow", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns only the latest version of all workflow definitions 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;WorkflowDef&gt;</returns>
        public List<WorkflowDef> GetAllWorkflowsWithLatestVersions(int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<List<WorkflowDef>> localVarResponse = GetAllWorkflowsWithLatestVersionsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns only the latest version of all workflow definitions 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;WorkflowDef&gt;</returns>
        public SwiftConductor.Client.ApiResponse<List<WorkflowDef>> GetAllWorkflowsWithLatestVersionsWithHttpInfo(int operationIndex = 0)
        {
            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MetadataResourceApi.GetAllWorkflowsWithLatestVersions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<WorkflowDef>>("/api/metadata/workflow/latest-versions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllWorkflowsWithLatestVersions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns only the latest version of all workflow definitions 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkflowDef&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkflowDef>> GetAllWorkflowsWithLatestVersionsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<List<WorkflowDef>> localVarResponse = await GetAllWorkflowsWithLatestVersionsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns only the latest version of all workflow definitions 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkflowDef&gt;)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<List<WorkflowDef>>> GetAllWorkflowsWithLatestVersionsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MetadataResourceApi.GetAllWorkflowsWithLatestVersions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<WorkflowDef>>("/api/metadata/workflow/latest-versions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllWorkflowsWithLatestVersions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the task definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaskDef</returns>
        public TaskDef GetTaskDef(string tasktype, int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<TaskDef> localVarResponse = GetTaskDefWithHttpInfo(tasktype);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the task definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaskDef</returns>
        public SwiftConductor.Client.ApiResponse<TaskDef> GetTaskDefWithHttpInfo(string tasktype, int operationIndex = 0)
        {
            // verify the required parameter 'tasktype' is set
            if (tasktype == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'tasktype' when calling MetadataResourceApi->GetTaskDef");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tasktype", SwiftConductor.Client.ClientUtils.ParameterToString(tasktype)); // path parameter

            localVarRequestOptions.Operation = "MetadataResourceApi.GetTaskDef";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TaskDef>("/api/metadata/taskdefs/{tasktype}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaskDef", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the task definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskDef</returns>
        public async System.Threading.Tasks.Task<TaskDef> GetTaskDefAsync(string tasktype, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<TaskDef> localVarResponse = await GetTaskDefWithHttpInfoAsync(tasktype, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the task definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskDef)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<TaskDef>> GetTaskDefWithHttpInfoAsync(string tasktype, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tasktype' is set
            if (tasktype == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'tasktype' when calling MetadataResourceApi->GetTaskDef");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tasktype", SwiftConductor.Client.ClientUtils.ParameterToString(tasktype)); // path parameter

            localVarRequestOptions.Operation = "MetadataResourceApi.GetTaskDef";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TaskDef>("/api/metadata/taskdefs/{tasktype}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaskDef", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all task definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TaskDef&gt;</returns>
        public List<TaskDef> GetTaskDefs(int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<List<TaskDef>> localVarResponse = GetTaskDefsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all task definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TaskDef&gt;</returns>
        public SwiftConductor.Client.ApiResponse<List<TaskDef>> GetTaskDefsWithHttpInfo(int operationIndex = 0)
        {
            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MetadataResourceApi.GetTaskDefs";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TaskDef>>("/api/metadata/taskdefs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaskDefs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all task definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskDef&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskDef>> GetTaskDefsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<List<TaskDef>> localVarResponse = await GetTaskDefsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all task definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskDef&gt;)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<List<TaskDef>>> GetTaskDefsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MetadataResourceApi.GetTaskDefs";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TaskDef>>("/api/metadata/taskdefs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaskDefs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns workflow names and versions only (no definition bodies) 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> GetWorkflowNamesAndVersions(int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<Dictionary<string, Object>> localVarResponse = GetWorkflowNamesAndVersionsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns workflow names and versions only (no definition bodies) 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public SwiftConductor.Client.ApiResponse<Dictionary<string, Object>> GetWorkflowNamesAndVersionsWithHttpInfo(int operationIndex = 0)
        {
            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MetadataResourceApi.GetWorkflowNamesAndVersions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, Object>>("/api/metadata/workflow/names-and-versions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkflowNamesAndVersions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns workflow names and versions only (no definition bodies) 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> GetWorkflowNamesAndVersionsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<Dictionary<string, Object>> localVarResponse = await GetWorkflowNamesAndVersionsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns workflow names and versions only (no definition bodies) 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Dictionary<string, Object>>> GetWorkflowNamesAndVersionsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MetadataResourceApi.GetWorkflowNamesAndVersions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, Object>>("/api/metadata/workflow/names-and-versions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkflowNamesAndVersions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing task 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RegisterTaskDef(TaskDef taskDef, int operationIndex = 0)
        {
            RegisterTaskDefWithHttpInfo(taskDef);
        }

        /// <summary>
        /// Update an existing task 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SwiftConductor.Client.ApiResponse<Object> RegisterTaskDefWithHttpInfo(TaskDef taskDef, int operationIndex = 0)
        {
            // verify the required parameter 'taskDef' is set
            if (taskDef == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskDef' when calling MetadataResourceApi->RegisterTaskDef");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = taskDef;

            localVarRequestOptions.Operation = "MetadataResourceApi.RegisterTaskDef";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/metadata/taskdefs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterTaskDef", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing task 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RegisterTaskDefAsync(TaskDef taskDef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RegisterTaskDefWithHttpInfoAsync(taskDef, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update an existing task 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Object>> RegisterTaskDefWithHttpInfoAsync(TaskDef taskDef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taskDef' is set
            if (taskDef == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskDef' when calling MetadataResourceApi->RegisterTaskDef");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = taskDef;

            localVarRequestOptions.Operation = "MetadataResourceApi.RegisterTaskDef";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/metadata/taskdefs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterTaskDef", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new task definition(s) 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RegisterTaskDef1(List<TaskDef> taskDef, int operationIndex = 0)
        {
            RegisterTaskDef1WithHttpInfo(taskDef);
        }

        /// <summary>
        /// Create new task definition(s) 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SwiftConductor.Client.ApiResponse<Object> RegisterTaskDef1WithHttpInfo(List<TaskDef> taskDef, int operationIndex = 0)
        {
            // verify the required parameter 'taskDef' is set
            if (taskDef == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskDef' when calling MetadataResourceApi->RegisterTaskDef1");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = taskDef;

            localVarRequestOptions.Operation = "MetadataResourceApi.RegisterTaskDef1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/metadata/taskdefs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterTaskDef1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new task definition(s) 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RegisterTaskDef1Async(List<TaskDef> taskDef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RegisterTaskDef1WithHttpInfoAsync(taskDef, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create new task definition(s) 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Object>> RegisterTaskDef1WithHttpInfoAsync(List<TaskDef> taskDef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taskDef' is set
            if (taskDef == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskDef' when calling MetadataResourceApi->RegisterTaskDef1");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = taskDef;

            localVarRequestOptions.Operation = "MetadataResourceApi.RegisterTaskDef1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/metadata/taskdefs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterTaskDef1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a task definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UnregisterTaskDef(string tasktype, int operationIndex = 0)
        {
            UnregisterTaskDefWithHttpInfo(tasktype);
        }

        /// <summary>
        /// Remove a task definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SwiftConductor.Client.ApiResponse<Object> UnregisterTaskDefWithHttpInfo(string tasktype, int operationIndex = 0)
        {
            // verify the required parameter 'tasktype' is set
            if (tasktype == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'tasktype' when calling MetadataResourceApi->UnregisterTaskDef");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tasktype", SwiftConductor.Client.ClientUtils.ParameterToString(tasktype)); // path parameter

            localVarRequestOptions.Operation = "MetadataResourceApi.UnregisterTaskDef";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/metadata/taskdefs/{tasktype}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnregisterTaskDef", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a task definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnregisterTaskDefAsync(string tasktype, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UnregisterTaskDefWithHttpInfoAsync(tasktype, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a task definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Object>> UnregisterTaskDefWithHttpInfoAsync(string tasktype, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tasktype' is set
            if (tasktype == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'tasktype' when calling MetadataResourceApi->UnregisterTaskDef");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tasktype", SwiftConductor.Client.ClientUtils.ParameterToString(tasktype)); // path parameter

            localVarRequestOptions.Operation = "MetadataResourceApi.UnregisterTaskDef";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/metadata/taskdefs/{tasktype}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnregisterTaskDef", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes workflow definition. It does not remove workflows associated with the definition. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UnregisterWorkflowDef(string name, int varVersion, int operationIndex = 0)
        {
            UnregisterWorkflowDefWithHttpInfo(name, varVersion);
        }

        /// <summary>
        /// Removes workflow definition. It does not remove workflows associated with the definition. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SwiftConductor.Client.ApiResponse<Object> UnregisterWorkflowDefWithHttpInfo(string name, int varVersion, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataResourceApi->UnregisterWorkflowDef");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", SwiftConductor.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", SwiftConductor.Client.ClientUtils.ParameterToString(varVersion)); // path parameter

            localVarRequestOptions.Operation = "MetadataResourceApi.UnregisterWorkflowDef";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/metadata/workflow/{name}/{version}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnregisterWorkflowDef", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes workflow definition. It does not remove workflows associated with the definition. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnregisterWorkflowDefAsync(string name, int varVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UnregisterWorkflowDefWithHttpInfoAsync(name, varVersion, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Removes workflow definition. It does not remove workflows associated with the definition. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="varVersion"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Object>> UnregisterWorkflowDefWithHttpInfoAsync(string name, int varVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataResourceApi->UnregisterWorkflowDef");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", SwiftConductor.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", SwiftConductor.Client.ClientUtils.ParameterToString(varVersion)); // path parameter

            localVarRequestOptions.Operation = "MetadataResourceApi.UnregisterWorkflowDef";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/metadata/workflow/{name}/{version}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnregisterWorkflowDef", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or update workflow definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BulkResponse</returns>
        public BulkResponse Update(List<WorkflowDef> workflowDef, int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<BulkResponse> localVarResponse = UpdateWithHttpInfo(workflowDef);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update workflow definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BulkResponse</returns>
        public SwiftConductor.Client.ApiResponse<BulkResponse> UpdateWithHttpInfo(List<WorkflowDef> workflowDef, int operationIndex = 0)
        {
            // verify the required parameter 'workflowDef' is set
            if (workflowDef == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowDef' when calling MetadataResourceApi->Update");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowDef;

            localVarRequestOptions.Operation = "MetadataResourceApi.Update";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<BulkResponse>("/api/metadata/workflow", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Update", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or update workflow definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BulkResponse</returns>
        public async System.Threading.Tasks.Task<BulkResponse> UpdateAsync(List<WorkflowDef> workflowDef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<BulkResponse> localVarResponse = await UpdateWithHttpInfoAsync(workflowDef, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update workflow definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BulkResponse)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<BulkResponse>> UpdateWithHttpInfoAsync(List<WorkflowDef> workflowDef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workflowDef' is set
            if (workflowDef == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowDef' when calling MetadataResourceApi->Update");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowDef;

            localVarRequestOptions.Operation = "MetadataResourceApi.Update";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<BulkResponse>("/api/metadata/workflow", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Update", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validates a new workflow definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Validate(WorkflowDef workflowDef, int operationIndex = 0)
        {
            ValidateWithHttpInfo(workflowDef);
        }

        /// <summary>
        /// Validates a new workflow definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SwiftConductor.Client.ApiResponse<Object> ValidateWithHttpInfo(WorkflowDef workflowDef, int operationIndex = 0)
        {
            // verify the required parameter 'workflowDef' is set
            if (workflowDef == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowDef' when calling MetadataResourceApi->Validate");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowDef;

            localVarRequestOptions.Operation = "MetadataResourceApi.Validate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/metadata/workflow/validate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Validate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validates a new workflow definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ValidateAsync(WorkflowDef workflowDef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ValidateWithHttpInfoAsync(workflowDef, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Validates a new workflow definition 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDef"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Object>> ValidateWithHttpInfoAsync(WorkflowDef workflowDef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workflowDef' is set
            if (workflowDef == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowDef' when calling MetadataResourceApi->Validate");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowDef;

            localVarRequestOptions.Operation = "MetadataResourceApi.Validate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/metadata/workflow/validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Validate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
