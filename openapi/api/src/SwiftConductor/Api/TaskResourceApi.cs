/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SwiftConductor.Client;
using SwiftConductor.Model;

namespace SwiftConductor.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskResourceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the details about each queue
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, long&gt;</returns>
        Dictionary<string, long> All(int operationIndex = 0);

        /// <summary>
        /// Get the details about each queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, long&gt;</returns>
        ApiResponse<Dictionary<string, long>> AllWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get the details about each queue
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, Dictionary&lt;string, Dictionary&lt;string, long&gt;&gt;&gt;</returns>
        Dictionary<string, Dictionary<string, Dictionary<string, long>>> AllVerbose(int operationIndex = 0);

        /// <summary>
        /// Get the details about each queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Dictionary&lt;string, Dictionary&lt;string, long&gt;&gt;&gt;</returns>
        ApiResponse<Dictionary<string, Dictionary<string, Dictionary<string, long>>>> AllVerboseWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Batch poll for a task of a certain type
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="workerid"> (optional)</param>
        /// <param name="domain"> (optional)</param>
        /// <param name="count"> (optional, default to 1)</param>
        /// <param name="timeout"> (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Task&gt;</returns>
        List<Task> BatchPoll(string tasktype, string? workerid = default(string?), string? domain = default(string?), int? count = default(int?), int? timeout = default(int?), int operationIndex = 0);

        /// <summary>
        /// Batch poll for a task of a certain type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="workerid"> (optional)</param>
        /// <param name="domain"> (optional)</param>
        /// <param name="count"> (optional, default to 1)</param>
        /// <param name="timeout"> (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Task&gt;</returns>
        ApiResponse<List<Task>> BatchPollWithHttpInfo(string tasktype, string? workerid = default(string?), string? domain = default(string?), int? count = default(int?), int? timeout = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get the last poll data for all task types
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PollData&gt;</returns>
        List<PollData> GetAllPollData(int operationIndex = 0);

        /// <summary>
        /// Get the last poll data for all task types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PollData&gt;</returns>
        ApiResponse<List<PollData>> GetAllPollDataWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get the external uri where the task payload is to be stored
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExternalStorageLocation</returns>
        ExternalStorageLocation GetExternalStorageLocation2(string path, string operation, string payloadType, int operationIndex = 0);

        /// <summary>
        /// Get the external uri where the task payload is to be stored
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExternalStorageLocation</returns>
        ApiResponse<ExternalStorageLocation> GetExternalStorageLocation2WithHttpInfo(string path, string operation, string payloadType, int operationIndex = 0);
        /// <summary>
        /// Get the last poll data for a given task type
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PollData&gt;</returns>
        List<PollData> GetPollData(string taskType, int operationIndex = 0);

        /// <summary>
        /// Get the last poll data for a given task type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PollData&gt;</returns>
        ApiResponse<List<PollData>> GetPollDataWithHttpInfo(string taskType, int operationIndex = 0);
        /// <summary>
        /// Get task by Id
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Task</returns>
        Task GetTask(string taskId, int operationIndex = 0);

        /// <summary>
        /// Get task by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> GetTaskWithHttpInfo(string taskId, int operationIndex = 0);
        /// <summary>
        /// Get Task Execution Logs
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TaskExecLog&gt;</returns>
        List<TaskExecLog> GetTaskLogs(string taskId, int operationIndex = 0);

        /// <summary>
        /// Get Task Execution Logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TaskExecLog&gt;</returns>
        ApiResponse<List<TaskExecLog>> GetTaskLogsWithHttpInfo(string taskId, int operationIndex = 0);
        /// <summary>
        /// Log Task Execution Details
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Log(string taskId, string body, int operationIndex = 0);

        /// <summary>
        /// Log Task Execution Details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LogWithHttpInfo(string taskId, string body, int operationIndex = 0);
        /// <summary>
        /// Poll for a task of a certain type
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="workerid"> (optional)</param>
        /// <param name="domain"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Task</returns>
        Task Poll(string tasktype, string? workerid = default(string?), string? domain = default(string?), int operationIndex = 0);

        /// <summary>
        /// Poll for a task of a certain type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="workerid"> (optional)</param>
        /// <param name="domain"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> PollWithHttpInfo(string tasktype, string? workerid = default(string?), string? domain = default(string?), int operationIndex = 0);
        /// <summary>
        /// Requeue pending tasks
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string RequeuePendingTask(string taskType, int operationIndex = 0);

        /// <summary>
        /// Requeue pending tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> RequeuePendingTaskWithHttpInfo(string taskType, int operationIndex = 0);
        /// <summary>
        /// Search for tasks based in payload and other parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResultTaskSummary</returns>
        SearchResultTaskSummary Search1(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0);

        /// <summary>
        /// Search for tasks based in payload and other parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResultTaskSummary</returns>
        ApiResponse<SearchResultTaskSummary> Search1WithHttpInfo(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0);
        /// <summary>
        /// Search for tasks based in payload and other parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResultTask</returns>
        SearchResultTask SearchV21(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0);

        /// <summary>
        /// Search for tasks based in payload and other parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResultTask</returns>
        ApiResponse<SearchResultTask> SearchV21WithHttpInfo(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0);
        /// <summary>
        /// Deprecated. Please use /tasks/queue/size endpoint
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, int&gt;</returns>
        [Obsolete]
        Dictionary<string, int> Size(List<string>? taskType = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Deprecated. Please use /tasks/queue/size endpoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, int&gt;</returns>
        [Obsolete]
        ApiResponse<Dictionary<string, int>> SizeWithHttpInfo(List<string>? taskType = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Get queue size for a task type.
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="domain"> (optional)</param>
        /// <param name="isolationGroupId"> (optional)</param>
        /// <param name="executionNamespace"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>int</returns>
        int TaskDepth(string taskType, string? domain = default(string?), string? isolationGroupId = default(string?), string? executionNamespace = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get queue size for a task type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="domain"> (optional)</param>
        /// <param name="isolationGroupId"> (optional)</param>
        /// <param name="executionNamespace"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> TaskDepthWithHttpInfo(string taskType, string? domain = default(string?), string? isolationGroupId = default(string?), string? executionNamespace = default(string?), int operationIndex = 0);
        /// <summary>
        /// Update a task
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskResult"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string UpdateTask(TaskResult taskResult, int operationIndex = 0);

        /// <summary>
        /// Update a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskResult"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> UpdateTaskWithHttpInfo(TaskResult taskResult, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskResourceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get the details about each queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, long&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, long>> AllAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the details about each queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, long&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, long>>> AllWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the details about each queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, Dictionary&lt;string, Dictionary&lt;string, long&gt;&gt;&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Dictionary<string, Dictionary<string, long>>>> AllVerboseAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the details about each queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Dictionary&lt;string, Dictionary&lt;string, long&gt;&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Dictionary<string, Dictionary<string, long>>>>> AllVerboseWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Batch poll for a task of a certain type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="workerid"> (optional)</param>
        /// <param name="domain"> (optional)</param>
        /// <param name="count"> (optional, default to 1)</param>
        /// <param name="timeout"> (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Task&gt;</returns>
        System.Threading.Tasks.Task<List<Task>> BatchPollAsync(string tasktype, string? workerid = default(string?), string? domain = default(string?), int? count = default(int?), int? timeout = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Batch poll for a task of a certain type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="workerid"> (optional)</param>
        /// <param name="domain"> (optional)</param>
        /// <param name="count"> (optional, default to 1)</param>
        /// <param name="timeout"> (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Task&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Task>>> BatchPollWithHttpInfoAsync(string tasktype, string? workerid = default(string?), string? domain = default(string?), int? count = default(int?), int? timeout = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the last poll data for all task types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PollData&gt;</returns>
        System.Threading.Tasks.Task<List<PollData>> GetAllPollDataAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the last poll data for all task types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PollData&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PollData>>> GetAllPollDataWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the external uri where the task payload is to be stored
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExternalStorageLocation</returns>
        System.Threading.Tasks.Task<ExternalStorageLocation> GetExternalStorageLocation2Async(string path, string operation, string payloadType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the external uri where the task payload is to be stored
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExternalStorageLocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalStorageLocation>> GetExternalStorageLocation2WithHttpInfoAsync(string path, string operation, string payloadType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the last poll data for a given task type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PollData&gt;</returns>
        System.Threading.Tasks.Task<List<PollData>> GetPollDataAsync(string taskType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the last poll data for a given task type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PollData&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PollData>>> GetPollDataWithHttpInfoAsync(string taskType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get task by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> GetTaskAsync(string taskId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get task by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> GetTaskWithHttpInfoAsync(string taskId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Task Execution Logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskExecLog&gt;</returns>
        System.Threading.Tasks.Task<List<TaskExecLog>> GetTaskLogsAsync(string taskId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Task Execution Logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskExecLog&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskExecLog>>> GetTaskLogsWithHttpInfoAsync(string taskId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Log Task Execution Details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LogAsync(string taskId, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Log Task Execution Details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LogWithHttpInfoAsync(string taskId, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Poll for a task of a certain type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="workerid"> (optional)</param>
        /// <param name="domain"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> PollAsync(string tasktype, string? workerid = default(string?), string? domain = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Poll for a task of a certain type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="workerid"> (optional)</param>
        /// <param name="domain"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> PollWithHttpInfoAsync(string tasktype, string? workerid = default(string?), string? domain = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Requeue pending tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> RequeuePendingTaskAsync(string taskType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Requeue pending tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> RequeuePendingTaskWithHttpInfoAsync(string taskType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for tasks based in payload and other parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResultTaskSummary</returns>
        System.Threading.Tasks.Task<SearchResultTaskSummary> Search1Async(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for tasks based in payload and other parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResultTaskSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResultTaskSummary>> Search1WithHttpInfoAsync(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for tasks based in payload and other parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResultTask</returns>
        System.Threading.Tasks.Task<SearchResultTask> SearchV21Async(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for tasks based in payload and other parameters
        /// </summary>
        /// <remarks>
        /// use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResultTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResultTask>> SearchV21WithHttpInfoAsync(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deprecated. Please use /tasks/queue/size endpoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, int&gt;</returns>
        [Obsolete]
        System.Threading.Tasks.Task<Dictionary<string, int>> SizeAsync(List<string>? taskType = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deprecated. Please use /tasks/queue/size endpoint
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, int&gt;)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, int>>> SizeWithHttpInfoAsync(List<string>? taskType = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get queue size for a task type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="domain"> (optional)</param>
        /// <param name="isolationGroupId"> (optional)</param>
        /// <param name="executionNamespace"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> TaskDepthAsync(string taskType, string? domain = default(string?), string? isolationGroupId = default(string?), string? executionNamespace = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get queue size for a task type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="domain"> (optional)</param>
        /// <param name="isolationGroupId"> (optional)</param>
        /// <param name="executionNamespace"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> TaskDepthWithHttpInfoAsync(string taskType, string? domain = default(string?), string? isolationGroupId = default(string?), string? executionNamespace = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskResult"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> UpdateTaskAsync(TaskResult taskResult, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskResult"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> UpdateTaskWithHttpInfoAsync(TaskResult taskResult, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskResourceApi : ITaskResourceApiSync, ITaskResourceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaskResourceApi : ITaskResourceApi
    {
        private SwiftConductor.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskResourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskResourceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskResourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskResourceApi(string basePath)
        {
            this.Configuration = SwiftConductor.Client.Configuration.MergeConfigurations(
                SwiftConductor.Client.GlobalConfiguration.Instance,
                new SwiftConductor.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SwiftConductor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SwiftConductor.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SwiftConductor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskResourceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaskResourceApi(SwiftConductor.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SwiftConductor.Client.Configuration.MergeConfigurations(
                SwiftConductor.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SwiftConductor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SwiftConductor.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SwiftConductor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskResourceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TaskResourceApi(SwiftConductor.Client.ISynchronousClient client, SwiftConductor.Client.IAsynchronousClient asyncClient, SwiftConductor.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SwiftConductor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SwiftConductor.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SwiftConductor.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SwiftConductor.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SwiftConductor.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get the details about each queue 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, long&gt;</returns>
        public Dictionary<string, long> All(int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<Dictionary<string, long>> localVarResponse = AllWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details about each queue 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, long&gt;</returns>
        public SwiftConductor.Client.ApiResponse<Dictionary<string, long>> AllWithHttpInfo(int operationIndex = 0)
        {
            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TaskResourceApi.All";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, long>>("/api/tasks/queue/all", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("All", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the details about each queue 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, long&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, long>> AllAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<Dictionary<string, long>> localVarResponse = await AllWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details about each queue 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, long&gt;)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Dictionary<string, long>>> AllWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TaskResourceApi.All";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, long>>("/api/tasks/queue/all", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("All", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the details about each queue 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, Dictionary&lt;string, Dictionary&lt;string, long&gt;&gt;&gt;</returns>
        public Dictionary<string, Dictionary<string, Dictionary<string, long>>> AllVerbose(int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<Dictionary<string, Dictionary<string, Dictionary<string, long>>>> localVarResponse = AllVerboseWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details about each queue 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Dictionary&lt;string, Dictionary&lt;string, long&gt;&gt;&gt;</returns>
        public SwiftConductor.Client.ApiResponse<Dictionary<string, Dictionary<string, Dictionary<string, long>>>> AllVerboseWithHttpInfo(int operationIndex = 0)
        {
            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TaskResourceApi.AllVerbose";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, Dictionary<string, Dictionary<string, long>>>>("/api/tasks/queue/all/verbose", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AllVerbose", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the details about each queue 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, Dictionary&lt;string, Dictionary&lt;string, long&gt;&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Dictionary<string, Dictionary<string, long>>>> AllVerboseAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<Dictionary<string, Dictionary<string, Dictionary<string, long>>>> localVarResponse = await AllVerboseWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details about each queue 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Dictionary&lt;string, Dictionary&lt;string, long&gt;&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Dictionary<string, Dictionary<string, Dictionary<string, long>>>>> AllVerboseWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TaskResourceApi.AllVerbose";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, Dictionary<string, Dictionary<string, long>>>>("/api/tasks/queue/all/verbose", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AllVerbose", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch poll for a task of a certain type 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="workerid"> (optional)</param>
        /// <param name="domain"> (optional)</param>
        /// <param name="count"> (optional, default to 1)</param>
        /// <param name="timeout"> (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Task&gt;</returns>
        public List<Task> BatchPoll(string tasktype, string? workerid = default(string?), string? domain = default(string?), int? count = default(int?), int? timeout = default(int?), int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<List<Task>> localVarResponse = BatchPollWithHttpInfo(tasktype, workerid, domain, count, timeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch poll for a task of a certain type 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="workerid"> (optional)</param>
        /// <param name="domain"> (optional)</param>
        /// <param name="count"> (optional, default to 1)</param>
        /// <param name="timeout"> (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Task&gt;</returns>
        public SwiftConductor.Client.ApiResponse<List<Task>> BatchPollWithHttpInfo(string tasktype, string? workerid = default(string?), string? domain = default(string?), int? count = default(int?), int? timeout = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'tasktype' is set
            if (tasktype == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'tasktype' when calling TaskResourceApi->BatchPoll");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tasktype", SwiftConductor.Client.ClientUtils.ParameterToString(tasktype)); // path parameter
            if (workerid != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "workerid", workerid));
            }
            if (domain != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "domain", domain));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }

            localVarRequestOptions.Operation = "TaskResourceApi.BatchPoll";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Task>>("/api/tasks/poll/batch/{tasktype}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchPoll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch poll for a task of a certain type 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="workerid"> (optional)</param>
        /// <param name="domain"> (optional)</param>
        /// <param name="count"> (optional, default to 1)</param>
        /// <param name="timeout"> (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Task&gt;</returns>
        public async System.Threading.Tasks.Task<List<Task>> BatchPollAsync(string tasktype, string? workerid = default(string?), string? domain = default(string?), int? count = default(int?), int? timeout = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<List<Task>> localVarResponse = await BatchPollWithHttpInfoAsync(tasktype, workerid, domain, count, timeout, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch poll for a task of a certain type 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="workerid"> (optional)</param>
        /// <param name="domain"> (optional)</param>
        /// <param name="count"> (optional, default to 1)</param>
        /// <param name="timeout"> (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Task&gt;)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<List<Task>>> BatchPollWithHttpInfoAsync(string tasktype, string? workerid = default(string?), string? domain = default(string?), int? count = default(int?), int? timeout = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tasktype' is set
            if (tasktype == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'tasktype' when calling TaskResourceApi->BatchPoll");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tasktype", SwiftConductor.Client.ClientUtils.ParameterToString(tasktype)); // path parameter
            if (workerid != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "workerid", workerid));
            }
            if (domain != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "domain", domain));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (timeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout));
            }

            localVarRequestOptions.Operation = "TaskResourceApi.BatchPoll";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Task>>("/api/tasks/poll/batch/{tasktype}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchPoll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the last poll data for all task types 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PollData&gt;</returns>
        public List<PollData> GetAllPollData(int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<List<PollData>> localVarResponse = GetAllPollDataWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the last poll data for all task types 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PollData&gt;</returns>
        public SwiftConductor.Client.ApiResponse<List<PollData>> GetAllPollDataWithHttpInfo(int operationIndex = 0)
        {
            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TaskResourceApi.GetAllPollData";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PollData>>("/api/tasks/queue/polldata/all", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllPollData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the last poll data for all task types 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PollData&gt;</returns>
        public async System.Threading.Tasks.Task<List<PollData>> GetAllPollDataAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<List<PollData>> localVarResponse = await GetAllPollDataWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the last poll data for all task types 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PollData&gt;)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<List<PollData>>> GetAllPollDataWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TaskResourceApi.GetAllPollData";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PollData>>("/api/tasks/queue/polldata/all", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllPollData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the external uri where the task payload is to be stored 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExternalStorageLocation</returns>
        public ExternalStorageLocation GetExternalStorageLocation2(string path, string operation, string payloadType, int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<ExternalStorageLocation> localVarResponse = GetExternalStorageLocation2WithHttpInfo(path, operation, payloadType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the external uri where the task payload is to be stored 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExternalStorageLocation</returns>
        public SwiftConductor.Client.ApiResponse<ExternalStorageLocation> GetExternalStorageLocation2WithHttpInfo(string path, string operation, string payloadType, int operationIndex = 0)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'path' when calling TaskResourceApi->GetExternalStorageLocation2");
            }

            // verify the required parameter 'operation' is set
            if (operation == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'operation' when calling TaskResourceApi->GetExternalStorageLocation2");
            }

            // verify the required parameter 'payloadType' is set
            if (payloadType == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'payloadType' when calling TaskResourceApi->GetExternalStorageLocation2");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "operation", operation));
            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "payloadType", payloadType));

            localVarRequestOptions.Operation = "TaskResourceApi.GetExternalStorageLocation2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ExternalStorageLocation>("/api/tasks/external-storage-location", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExternalStorageLocation2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the external uri where the task payload is to be stored 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExternalStorageLocation</returns>
        public async System.Threading.Tasks.Task<ExternalStorageLocation> GetExternalStorageLocation2Async(string path, string operation, string payloadType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<ExternalStorageLocation> localVarResponse = await GetExternalStorageLocation2WithHttpInfoAsync(path, operation, payloadType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the external uri where the task payload is to be stored 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="operation"></param>
        /// <param name="payloadType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExternalStorageLocation)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<ExternalStorageLocation>> GetExternalStorageLocation2WithHttpInfoAsync(string path, string operation, string payloadType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'path' when calling TaskResourceApi->GetExternalStorageLocation2");
            }

            // verify the required parameter 'operation' is set
            if (operation == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'operation' when calling TaskResourceApi->GetExternalStorageLocation2");
            }

            // verify the required parameter 'payloadType' is set
            if (payloadType == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'payloadType' when calling TaskResourceApi->GetExternalStorageLocation2");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "operation", operation));
            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "payloadType", payloadType));

            localVarRequestOptions.Operation = "TaskResourceApi.GetExternalStorageLocation2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExternalStorageLocation>("/api/tasks/external-storage-location", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExternalStorageLocation2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the last poll data for a given task type 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PollData&gt;</returns>
        public List<PollData> GetPollData(string taskType, int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<List<PollData>> localVarResponse = GetPollDataWithHttpInfo(taskType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the last poll data for a given task type 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PollData&gt;</returns>
        public SwiftConductor.Client.ApiResponse<List<PollData>> GetPollDataWithHttpInfo(string taskType, int operationIndex = 0)
        {
            // verify the required parameter 'taskType' is set
            if (taskType == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskType' when calling TaskResourceApi->GetPollData");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "taskType", taskType));

            localVarRequestOptions.Operation = "TaskResourceApi.GetPollData";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PollData>>("/api/tasks/queue/polldata", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPollData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the last poll data for a given task type 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PollData&gt;</returns>
        public async System.Threading.Tasks.Task<List<PollData>> GetPollDataAsync(string taskType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<List<PollData>> localVarResponse = await GetPollDataWithHttpInfoAsync(taskType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the last poll data for a given task type 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PollData&gt;)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<List<PollData>>> GetPollDataWithHttpInfoAsync(string taskType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taskType' is set
            if (taskType == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskType' when calling TaskResourceApi->GetPollData");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "taskType", taskType));

            localVarRequestOptions.Operation = "TaskResourceApi.GetPollData";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PollData>>("/api/tasks/queue/polldata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPollData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get task by Id 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Task</returns>
        public Task GetTask(string taskId, int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<Task> localVarResponse = GetTaskWithHttpInfo(taskId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get task by Id 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Task</returns>
        public SwiftConductor.Client.ApiResponse<Task> GetTaskWithHttpInfo(string taskId, int operationIndex = 0)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskResourceApi->GetTask");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("taskId", SwiftConductor.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            localVarRequestOptions.Operation = "TaskResourceApi.GetTask";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Task>("/api/tasks/{taskId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTask", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get task by Id 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> GetTaskAsync(string taskId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<Task> localVarResponse = await GetTaskWithHttpInfoAsync(taskId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get task by Id 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Task>> GetTaskWithHttpInfoAsync(string taskId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskResourceApi->GetTask");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("taskId", SwiftConductor.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            localVarRequestOptions.Operation = "TaskResourceApi.GetTask";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Task>("/api/tasks/{taskId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTask", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Task Execution Logs 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TaskExecLog&gt;</returns>
        public List<TaskExecLog> GetTaskLogs(string taskId, int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<List<TaskExecLog>> localVarResponse = GetTaskLogsWithHttpInfo(taskId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Task Execution Logs 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TaskExecLog&gt;</returns>
        public SwiftConductor.Client.ApiResponse<List<TaskExecLog>> GetTaskLogsWithHttpInfo(string taskId, int operationIndex = 0)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskResourceApi->GetTaskLogs");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("taskId", SwiftConductor.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            localVarRequestOptions.Operation = "TaskResourceApi.GetTaskLogs";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TaskExecLog>>("/api/tasks/{taskId}/log", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaskLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Task Execution Logs 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskExecLog&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskExecLog>> GetTaskLogsAsync(string taskId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<List<TaskExecLog>> localVarResponse = await GetTaskLogsWithHttpInfoAsync(taskId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Task Execution Logs 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskExecLog&gt;)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<List<TaskExecLog>>> GetTaskLogsWithHttpInfoAsync(string taskId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskResourceApi->GetTaskLogs");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("taskId", SwiftConductor.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            localVarRequestOptions.Operation = "TaskResourceApi.GetTaskLogs";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TaskExecLog>>("/api/tasks/{taskId}/log", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaskLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log Task Execution Details 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Log(string taskId, string body, int operationIndex = 0)
        {
            LogWithHttpInfo(taskId, body);
        }

        /// <summary>
        /// Log Task Execution Details 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SwiftConductor.Client.ApiResponse<Object> LogWithHttpInfo(string taskId, string body, int operationIndex = 0)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskResourceApi->Log");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'body' when calling TaskResourceApi->Log");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("taskId", SwiftConductor.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TaskResourceApi.Log";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/tasks/{taskId}/log", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Log", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log Task Execution Details 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LogAsync(string taskId, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LogWithHttpInfoAsync(taskId, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Log Task Execution Details 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Object>> LogWithHttpInfoAsync(string taskId, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskResourceApi->Log");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'body' when calling TaskResourceApi->Log");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("taskId", SwiftConductor.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TaskResourceApi.Log";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/tasks/{taskId}/log", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Log", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Poll for a task of a certain type 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="workerid"> (optional)</param>
        /// <param name="domain"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Task</returns>
        public Task Poll(string tasktype, string? workerid = default(string?), string? domain = default(string?), int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<Task> localVarResponse = PollWithHttpInfo(tasktype, workerid, domain);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Poll for a task of a certain type 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="workerid"> (optional)</param>
        /// <param name="domain"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Task</returns>
        public SwiftConductor.Client.ApiResponse<Task> PollWithHttpInfo(string tasktype, string? workerid = default(string?), string? domain = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tasktype' is set
            if (tasktype == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'tasktype' when calling TaskResourceApi->Poll");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tasktype", SwiftConductor.Client.ClientUtils.ParameterToString(tasktype)); // path parameter
            if (workerid != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "workerid", workerid));
            }
            if (domain != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "domain", domain));
            }

            localVarRequestOptions.Operation = "TaskResourceApi.Poll";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Task>("/api/tasks/poll/{tasktype}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Poll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Poll for a task of a certain type 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="workerid"> (optional)</param>
        /// <param name="domain"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> PollAsync(string tasktype, string? workerid = default(string?), string? domain = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<Task> localVarResponse = await PollWithHttpInfoAsync(tasktype, workerid, domain, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Poll for a task of a certain type 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tasktype"></param>
        /// <param name="workerid"> (optional)</param>
        /// <param name="domain"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Task>> PollWithHttpInfoAsync(string tasktype, string? workerid = default(string?), string? domain = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tasktype' is set
            if (tasktype == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'tasktype' when calling TaskResourceApi->Poll");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tasktype", SwiftConductor.Client.ClientUtils.ParameterToString(tasktype)); // path parameter
            if (workerid != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "workerid", workerid));
            }
            if (domain != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "domain", domain));
            }

            localVarRequestOptions.Operation = "TaskResourceApi.Poll";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Task>("/api/tasks/poll/{tasktype}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Poll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Requeue pending tasks 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string RequeuePendingTask(string taskType, int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<string> localVarResponse = RequeuePendingTaskWithHttpInfo(taskType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requeue pending tasks 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public SwiftConductor.Client.ApiResponse<string> RequeuePendingTaskWithHttpInfo(string taskType, int operationIndex = 0)
        {
            // verify the required parameter 'taskType' is set
            if (taskType == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskType' when calling TaskResourceApi->RequeuePendingTask");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("taskType", SwiftConductor.Client.ClientUtils.ParameterToString(taskType)); // path parameter

            localVarRequestOptions.Operation = "TaskResourceApi.RequeuePendingTask";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/api/tasks/queue/requeue/{taskType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequeuePendingTask", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Requeue pending tasks 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> RequeuePendingTaskAsync(string taskType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<string> localVarResponse = await RequeuePendingTaskWithHttpInfoAsync(taskType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requeue pending tasks 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<string>> RequeuePendingTaskWithHttpInfoAsync(string taskType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taskType' is set
            if (taskType == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskType' when calling TaskResourceApi->RequeuePendingTask");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("taskType", SwiftConductor.Client.ClientUtils.ParameterToString(taskType)); // path parameter

            localVarRequestOptions.Operation = "TaskResourceApi.RequeuePendingTask";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/api/tasks/queue/requeue/{taskType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequeuePendingTask", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for tasks based in payload and other parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResultTaskSummary</returns>
        public SearchResultTaskSummary Search1(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<SearchResultTaskSummary> localVarResponse = Search1WithHttpInfo(start, size, sort, freeText, query);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for tasks based in payload and other parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResultTaskSummary</returns>
        public SwiftConductor.Client.ApiResponse<SearchResultTaskSummary> Search1WithHttpInfo(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0)
        {
            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (freeText != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "freeText", freeText));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }

            localVarRequestOptions.Operation = "TaskResourceApi.Search1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchResultTaskSummary>("/api/tasks/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Search1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for tasks based in payload and other parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResultTaskSummary</returns>
        public async System.Threading.Tasks.Task<SearchResultTaskSummary> Search1Async(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<SearchResultTaskSummary> localVarResponse = await Search1WithHttpInfoAsync(start, size, sort, freeText, query, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for tasks based in payload and other parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResultTaskSummary)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<SearchResultTaskSummary>> Search1WithHttpInfoAsync(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (freeText != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "freeText", freeText));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }

            localVarRequestOptions.Operation = "TaskResourceApi.Search1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchResultTaskSummary>("/api/tasks/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Search1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for tasks based in payload and other parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResultTask</returns>
        public SearchResultTask SearchV21(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<SearchResultTask> localVarResponse = SearchV21WithHttpInfo(start, size, sort, freeText, query);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for tasks based in payload and other parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResultTask</returns>
        public SwiftConductor.Client.ApiResponse<SearchResultTask> SearchV21WithHttpInfo(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0)
        {
            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (freeText != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "freeText", freeText));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }

            localVarRequestOptions.Operation = "TaskResourceApi.SearchV21";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchResultTask>("/api/tasks/search-v2", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchV21", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for tasks based in payload and other parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResultTask</returns>
        public async System.Threading.Tasks.Task<SearchResultTask> SearchV21Async(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<SearchResultTask> localVarResponse = await SearchV21WithHttpInfoAsync(start, size, sort, freeText, query, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for tasks based in payload and other parameters use sort options as sort&#x3D;&lt;field&gt;:ASC|DESC e.g. sort&#x3D;name&amp;sort&#x3D;workflowId:DESC. If order is not specified, defaults to ASC
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 100)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="freeText"> (optional, default to &quot;*&quot;)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResultTask)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<SearchResultTask>> SearchV21WithHttpInfoAsync(int? start = default(int?), int? size = default(int?), string? sort = default(string?), string? freeText = default(string?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (freeText != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "freeText", freeText));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }

            localVarRequestOptions.Operation = "TaskResourceApi.SearchV21";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchResultTask>("/api/tasks/search-v2", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchV21", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deprecated. Please use /tasks/queue/size endpoint 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, int&gt;</returns>
        [Obsolete]
        public Dictionary<string, int> Size(List<string>? taskType = default(List<string>?), int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<Dictionary<string, int>> localVarResponse = SizeWithHttpInfo(taskType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deprecated. Please use /tasks/queue/size endpoint 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, int&gt;</returns>
        [Obsolete]
        public SwiftConductor.Client.ApiResponse<Dictionary<string, int>> SizeWithHttpInfo(List<string>? taskType = default(List<string>?), int operationIndex = 0)
        {
            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (taskType != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("multi", "taskType", taskType));
            }

            localVarRequestOptions.Operation = "TaskResourceApi.Size";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, int>>("/api/tasks/queue/sizes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Size", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deprecated. Please use /tasks/queue/size endpoint 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, int&gt;</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Dictionary<string, int>> SizeAsync(List<string>? taskType = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<Dictionary<string, int>> localVarResponse = await SizeWithHttpInfoAsync(taskType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deprecated. Please use /tasks/queue/size endpoint 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, int&gt;)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Dictionary<string, int>>> SizeWithHttpInfoAsync(List<string>? taskType = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (taskType != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("multi", "taskType", taskType));
            }

            localVarRequestOptions.Operation = "TaskResourceApi.Size";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, int>>("/api/tasks/queue/sizes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Size", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get queue size for a task type. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="domain"> (optional)</param>
        /// <param name="isolationGroupId"> (optional)</param>
        /// <param name="executionNamespace"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>int</returns>
        public int TaskDepth(string taskType, string? domain = default(string?), string? isolationGroupId = default(string?), string? executionNamespace = default(string?), int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<int> localVarResponse = TaskDepthWithHttpInfo(taskType, domain, isolationGroupId, executionNamespace);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get queue size for a task type. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="domain"> (optional)</param>
        /// <param name="isolationGroupId"> (optional)</param>
        /// <param name="executionNamespace"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of int</returns>
        public SwiftConductor.Client.ApiResponse<int> TaskDepthWithHttpInfo(string taskType, string? domain = default(string?), string? isolationGroupId = default(string?), string? executionNamespace = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'taskType' is set
            if (taskType == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskType' when calling TaskResourceApi->TaskDepth");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "taskType", taskType));
            if (domain != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "domain", domain));
            }
            if (isolationGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "isolationGroupId", isolationGroupId));
            }
            if (executionNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "executionNamespace", executionNamespace));
            }

            localVarRequestOptions.Operation = "TaskResourceApi.TaskDepth";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<int>("/api/tasks/queue/size", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TaskDepth", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get queue size for a task type. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="domain"> (optional)</param>
        /// <param name="isolationGroupId"> (optional)</param>
        /// <param name="executionNamespace"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> TaskDepthAsync(string taskType, string? domain = default(string?), string? isolationGroupId = default(string?), string? executionNamespace = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<int> localVarResponse = await TaskDepthWithHttpInfoAsync(taskType, domain, isolationGroupId, executionNamespace, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get queue size for a task type. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskType"></param>
        /// <param name="domain"> (optional)</param>
        /// <param name="isolationGroupId"> (optional)</param>
        /// <param name="executionNamespace"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<int>> TaskDepthWithHttpInfoAsync(string taskType, string? domain = default(string?), string? isolationGroupId = default(string?), string? executionNamespace = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taskType' is set
            if (taskType == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskType' when calling TaskResourceApi->TaskDepth");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "taskType", taskType));
            if (domain != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "domain", domain));
            }
            if (isolationGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "isolationGroupId", isolationGroupId));
            }
            if (executionNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(SwiftConductor.Client.ClientUtils.ParameterToMultiMap("", "executionNamespace", executionNamespace));
            }

            localVarRequestOptions.Operation = "TaskResourceApi.TaskDepth";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<int>("/api/tasks/queue/size", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TaskDepth", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a task 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskResult"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string UpdateTask(TaskResult taskResult, int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<string> localVarResponse = UpdateTaskWithHttpInfo(taskResult);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a task 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskResult"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public SwiftConductor.Client.ApiResponse<string> UpdateTaskWithHttpInfo(TaskResult taskResult, int operationIndex = 0)
        {
            // verify the required parameter 'taskResult' is set
            if (taskResult == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskResult' when calling TaskResourceApi->UpdateTask");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = taskResult;

            localVarRequestOptions.Operation = "TaskResourceApi.UpdateTask";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/api/tasks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTask", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a task 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskResult"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> UpdateTaskAsync(TaskResult taskResult, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<string> localVarResponse = await UpdateTaskWithHttpInfoAsync(taskResult, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a task 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskResult"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<string>> UpdateTaskWithHttpInfoAsync(TaskResult taskResult, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taskResult' is set
            if (taskResult == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskResult' when calling TaskResourceApi->UpdateTask");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = taskResult;

            localVarRequestOptions.Operation = "TaskResourceApi.UpdateTask";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/api/tasks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTask", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
