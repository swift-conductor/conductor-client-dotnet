/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SwiftConductor.Client;

namespace SwiftConductor.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQueueAdminResourceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Queue Names
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> Names(int operationIndex = 0);

        /// <summary>
        /// Get Queue Names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> NamesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get the queue length
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, long&gt;</returns>
        Dictionary<string, long> Size1(int operationIndex = 0);

        /// <summary>
        /// Get the queue length
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, long&gt;</returns>
        ApiResponse<Dictionary<string, long>> Size1WithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Publish a message in queue to mark a wait task as completed.
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskRefName"></param>
        /// <param name="status"></param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Update1(string workflowId, string taskRefName, string status, Dictionary<string, Object> requestBody, int operationIndex = 0);

        /// <summary>
        /// Publish a message in queue to mark a wait task as completed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskRefName"></param>
        /// <param name="status"></param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Update1WithHttpInfo(string workflowId, string taskRefName, string status, Dictionary<string, Object> requestBody, int operationIndex = 0);
        /// <summary>
        /// Publish a message in queue to mark a wait task (by taskId) as completed.
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskId"></param>
        /// <param name="status"></param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateByTaskId(string workflowId, string taskId, string status, Dictionary<string, Object> requestBody, int operationIndex = 0);

        /// <summary>
        /// Publish a message in queue to mark a wait task (by taskId) as completed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskId"></param>
        /// <param name="status"></param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateByTaskIdWithHttpInfo(string workflowId, string taskId, string status, Dictionary<string, Object> requestBody, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQueueAdminResourceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Queue Names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, string>> NamesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Queue Names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> NamesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the queue length
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, long&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, long>> Size1Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the queue length
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, long&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, long>>> Size1WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Publish a message in queue to mark a wait task as completed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskRefName"></param>
        /// <param name="status"></param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Update1Async(string workflowId, string taskRefName, string status, Dictionary<string, Object> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Publish a message in queue to mark a wait task as completed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskRefName"></param>
        /// <param name="status"></param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Update1WithHttpInfoAsync(string workflowId, string taskRefName, string status, Dictionary<string, Object> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Publish a message in queue to mark a wait task (by taskId) as completed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskId"></param>
        /// <param name="status"></param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateByTaskIdAsync(string workflowId, string taskId, string status, Dictionary<string, Object> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Publish a message in queue to mark a wait task (by taskId) as completed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskId"></param>
        /// <param name="status"></param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateByTaskIdWithHttpInfoAsync(string workflowId, string taskId, string status, Dictionary<string, Object> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQueueAdminResourceApi : IQueueAdminResourceApiSync, IQueueAdminResourceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QueueAdminResourceApi : IQueueAdminResourceApi
    {
        private SwiftConductor.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QueueAdminResourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QueueAdminResourceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueueAdminResourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QueueAdminResourceApi(string basePath)
        {
            this.Configuration = SwiftConductor.Client.Configuration.MergeConfigurations(
                SwiftConductor.Client.GlobalConfiguration.Instance,
                new SwiftConductor.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SwiftConductor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SwiftConductor.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SwiftConductor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueueAdminResourceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QueueAdminResourceApi(SwiftConductor.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SwiftConductor.Client.Configuration.MergeConfigurations(
                SwiftConductor.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SwiftConductor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SwiftConductor.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SwiftConductor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueueAdminResourceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public QueueAdminResourceApi(SwiftConductor.Client.ISynchronousClient client, SwiftConductor.Client.IAsynchronousClient asyncClient, SwiftConductor.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SwiftConductor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SwiftConductor.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SwiftConductor.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SwiftConductor.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SwiftConductor.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Queue Names 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        public Dictionary<string, string> Names(int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<Dictionary<string, string>> localVarResponse = NamesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Queue Names 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        public SwiftConductor.Client.ApiResponse<Dictionary<string, string>> NamesWithHttpInfo(int operationIndex = 0)
        {
            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "QueueAdminResourceApi.Names";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, string>>("/api/queue/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Names", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Queue Names 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, string>> NamesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<Dictionary<string, string>> localVarResponse = await NamesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Queue Names 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Dictionary<string, string>>> NamesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "QueueAdminResourceApi.Names";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, string>>("/api/queue/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Names", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the queue length 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, long&gt;</returns>
        public Dictionary<string, long> Size1(int operationIndex = 0)
        {
            SwiftConductor.Client.ApiResponse<Dictionary<string, long>> localVarResponse = Size1WithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the queue length 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, long&gt;</returns>
        public SwiftConductor.Client.ApiResponse<Dictionary<string, long>> Size1WithHttpInfo(int operationIndex = 0)
        {
            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "QueueAdminResourceApi.Size1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, long>>("/api/queue/size", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Size1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the queue length 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, long&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, long>> Size1Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SwiftConductor.Client.ApiResponse<Dictionary<string, long>> localVarResponse = await Size1WithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the queue length 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, long&gt;)</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Dictionary<string, long>>> Size1WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "QueueAdminResourceApi.Size1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, long>>("/api/queue/size", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Size1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Publish a message in queue to mark a wait task as completed. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskRefName"></param>
        /// <param name="status"></param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Update1(string workflowId, string taskRefName, string status, Dictionary<string, Object> requestBody, int operationIndex = 0)
        {
            Update1WithHttpInfo(workflowId, taskRefName, status, requestBody);
        }

        /// <summary>
        /// Publish a message in queue to mark a wait task as completed. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskRefName"></param>
        /// <param name="status"></param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SwiftConductor.Client.ApiResponse<Object> Update1WithHttpInfo(string workflowId, string taskRefName, string status, Dictionary<string, Object> requestBody, int operationIndex = 0)
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling QueueAdminResourceApi->Update1");
            }

            // verify the required parameter 'taskRefName' is set
            if (taskRefName == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskRefName' when calling QueueAdminResourceApi->Update1");
            }

            // verify the required parameter 'status' is set
            if (status == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'status' when calling QueueAdminResourceApi->Update1");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'requestBody' when calling QueueAdminResourceApi->Update1");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter
            localVarRequestOptions.PathParameters.Add("taskRefName", SwiftConductor.Client.ClientUtils.ParameterToString(taskRefName)); // path parameter
            localVarRequestOptions.PathParameters.Add("status", SwiftConductor.Client.ClientUtils.ParameterToString(status)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "QueueAdminResourceApi.Update1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/queue/update/{workflowId}/{taskRefName}/{status}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Update1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Publish a message in queue to mark a wait task as completed. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskRefName"></param>
        /// <param name="status"></param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Update1Async(string workflowId, string taskRefName, string status, Dictionary<string, Object> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await Update1WithHttpInfoAsync(workflowId, taskRefName, status, requestBody, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Publish a message in queue to mark a wait task as completed. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskRefName"></param>
        /// <param name="status"></param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Object>> Update1WithHttpInfoAsync(string workflowId, string taskRefName, string status, Dictionary<string, Object> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling QueueAdminResourceApi->Update1");
            }

            // verify the required parameter 'taskRefName' is set
            if (taskRefName == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskRefName' when calling QueueAdminResourceApi->Update1");
            }

            // verify the required parameter 'status' is set
            if (status == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'status' when calling QueueAdminResourceApi->Update1");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'requestBody' when calling QueueAdminResourceApi->Update1");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter
            localVarRequestOptions.PathParameters.Add("taskRefName", SwiftConductor.Client.ClientUtils.ParameterToString(taskRefName)); // path parameter
            localVarRequestOptions.PathParameters.Add("status", SwiftConductor.Client.ClientUtils.ParameterToString(status)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "QueueAdminResourceApi.Update1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/queue/update/{workflowId}/{taskRefName}/{status}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Update1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Publish a message in queue to mark a wait task (by taskId) as completed. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskId"></param>
        /// <param name="status"></param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateByTaskId(string workflowId, string taskId, string status, Dictionary<string, Object> requestBody, int operationIndex = 0)
        {
            UpdateByTaskIdWithHttpInfo(workflowId, taskId, status, requestBody);
        }

        /// <summary>
        /// Publish a message in queue to mark a wait task (by taskId) as completed. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskId"></param>
        /// <param name="status"></param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SwiftConductor.Client.ApiResponse<Object> UpdateByTaskIdWithHttpInfo(string workflowId, string taskId, string status, Dictionary<string, Object> requestBody, int operationIndex = 0)
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling QueueAdminResourceApi->UpdateByTaskId");
            }

            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskId' when calling QueueAdminResourceApi->UpdateByTaskId");
            }

            // verify the required parameter 'status' is set
            if (status == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'status' when calling QueueAdminResourceApi->UpdateByTaskId");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'requestBody' when calling QueueAdminResourceApi->UpdateByTaskId");
            }

            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter
            localVarRequestOptions.PathParameters.Add("taskId", SwiftConductor.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.PathParameters.Add("status", SwiftConductor.Client.ClientUtils.ParameterToString(status)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "QueueAdminResourceApi.UpdateByTaskId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/queue/update/{workflowId}/task/{taskId}/{status}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateByTaskId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Publish a message in queue to mark a wait task (by taskId) as completed. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskId"></param>
        /// <param name="status"></param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateByTaskIdAsync(string workflowId, string taskId, string status, Dictionary<string, Object> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateByTaskIdWithHttpInfoAsync(workflowId, taskId, status, requestBody, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Publish a message in queue to mark a wait task (by taskId) as completed. 
        /// </summary>
        /// <exception cref="SwiftConductor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowId"></param>
        /// <param name="taskId"></param>
        /// <param name="status"></param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SwiftConductor.Client.ApiResponse<Object>> UpdateByTaskIdWithHttpInfoAsync(string workflowId, string taskId, string status, Dictionary<string, Object> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workflowId' is set
            if (workflowId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'workflowId' when calling QueueAdminResourceApi->UpdateByTaskId");
            }

            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'taskId' when calling QueueAdminResourceApi->UpdateByTaskId");
            }

            // verify the required parameter 'status' is set
            if (status == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'status' when calling QueueAdminResourceApi->UpdateByTaskId");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new SwiftConductor.Client.ApiException(400, "Missing required parameter 'requestBody' when calling QueueAdminResourceApi->UpdateByTaskId");
            }


            SwiftConductor.Client.RequestOptions localVarRequestOptions = new SwiftConductor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = SwiftConductor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SwiftConductor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workflowId", SwiftConductor.Client.ClientUtils.ParameterToString(workflowId)); // path parameter
            localVarRequestOptions.PathParameters.Add("taskId", SwiftConductor.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.PathParameters.Add("status", SwiftConductor.Client.ClientUtils.ParameterToString(status)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "QueueAdminResourceApi.UpdateByTaskId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/queue/update/{workflowId}/task/{taskId}/{status}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateByTaskId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
